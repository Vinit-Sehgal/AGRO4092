---
title-block-banner: true
bibliography: references.bib
---

## Overview
In this chapter we will learn about different types of spatial datasets (`raster` and `vector`). We will visualize these spatial datasets using static and interactive plotting options available in R. We will also explore different color palettes options available for generating spatial maps for scientific/technical reporting of spatial datasets. We will also learn briefly explore coordinate reference systems and map projections for spatial data representation. 

### Sample dataset

We will familiarize ourselves with several open-source global datasets and use them to practice spatial mapping and computing in R.

+:-----------------------------------------------------------------------------------------------------------------------------------------+:------------------------------------------:+
| 1.  Global surface soil moisture from NASA's Soil Moisture Active Passive (SMAP) satellite [@entekhabi2009]                              | ![](images/SMAP.jpg){width="242"}          |
|                                                                                                                                          |                                            |
| <https://smap.jpl.nasa.gov/>                                                                                                             |                                            |
+------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------+
| 2.  Normalized Difference Vegetation Index (NDVI) from Moderate Resolution Imaging Spectroradiometer (MODIS) [@huete1999modis]           | ![](images/modis.jpg){width="250"}         |
|                                                                                                                                          |                                            |
| <https://modis.gsfc.nasa.gov/data/dataprod/mod13.php>                                                                                    |                                            |
+------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------+
| 3.  Global climate reference land regions from Coupled Model Intercomparison Project (CMIP) project [@iturbide2020]                      | ![](images/IPCC_CRR.png){width="843"}      |
|                                                                                                                                          |                                            |
| <https://essd.copernicus.org/articles/12/2959/2020/>                                                                                     |                                            |
+------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------+
| 4.  Climate classification (Hyper-arid, arid, semi-arid, sub-humid and humid) based on Global Aridity Index Database [@zomer2022version] | ![](images/aridity_index.PNG){width="497"} |
|                                                                                                                                          |                                            |
| <https://csidotinfo.wordpress.com/2019/01/24/global-aridity-index-and-potential-evapotranspiration-climate-database-v3/>                 |                                            |
+------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------+

### Data download

The sample dataset for this resource is uploaded to `GitHub` for easy access. Download the sample data manually as a zip file from: `https://github.com/Vinit-Sehgal/SampleData` . Once downloaded, extract the zip folder to the current working directory.

Alternatively, use the following script to programmatically download and extract the sample data from the `GitHub` repository.

```{r}
###############################################################
#~~~ Import sample data from GitHub repository

if (dir.exists("SampleData-master")==FALSE){ 
# First we check if the folder already exists. If not, the download begins
download.file(url = "https://github.com/Vinit-Sehgal/SampleData/archive/master.zip",
destfile = "SampleData-master.zip")    # Download ".Zip"

# Unzip the downloaded .zip file
unzip(zipfile = "SampleData-master.zip")
}

# getwd()                           # Current working directory
list.files("./SampleData-master")   # List folder contents. Do you see sample datasets?

```

### Raster and shapefile visualization

A `geographic information system`, or `GIS` refers to a platform which can map, analyzes and manipulate **geographically referenced** dataset. A geographically referenced data (or geo-referenced data) is a spatial dataset which can be related to a point on Earth with the help of geographic coordinates. Types of geo-referenced spatial data include: rasters (grids of regularly sized pixels) and vectors (polygons, lines, points).

<br>

<center>![](images/SpatialDataIntro.png)</center>

<br>

A quick and helpful review of spatial data can be found here: <https://spatialvision.com.au/blog-raster-and-vector-data-in-gis/>

#### Plotting raster data: with `terra` and `tmap`

In this section, we plot global raster data of surface (\~5 cm) soil moisture from SMAP. Let's start by first importing the global soil moisture raster.

```{r, message = FALSE, warning = FALSE,results='asis'}
# Import package for raster operations
library(terra) 

# Import SMAP soil moisture raster from the downloaded folder
sm=terra::rast("./SampleData-master/raster_files/SMAP_SM.tif")
```

Once we have imported the `SpatRaster` (short for "spatial raster") using `rast()` function from `terra` package, let's note its attributes. Notice the `dimensions`, `resolution`, `extent`, `crs` i.e. coordinate reference system and `values`. Note that the cell of one raster layer can only hold a single numerical value.

```{r, message = FALSE, warning = FALSE,results='asis'}
# Print raster attributes
print(sm)
# Try:
# dim(sm)   # Dimension (nrow, ncol, nlyr) of the raster
# terra::res(sm)   # X-Y resolution of the raster
# terra::ext(sm)   # Spatial extent of the raster
# terra::crs(sm)   # Coordinate reference system
```

Now let's plot the raster using `terra::plot`.

```{r, message = FALSE, warning = FALSE,results='asis'}
# Basic Raster plot 
terra::plot(sm, main = "Soil Moisture") 
```

#### Scientific Color palettes

Using a good color palette is an important aspect of spatial mapping. Choice of a good colormap can help the readers understand the key aspects of the map. The selected colors must adequately represent the key features and their differences, wherever applicable, with the least distortion, ambiguity or effort. There are several libraries available in R specifically dedicated to generating color pelettes for scientific mapping. We will also learn the the usage of `cetcolor` and `scico` packages to generate perceptually uniform and color-blindness friendly palettes.

<br>

Some key packages for generating color palettes for scientific mapping are:

1.  `RColorBrewer`: <https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3>
2.  `cetcolors` (Perceptually Uniform Colour Maps): <https://cran.r-project.org/web/packages/cetcolor/vignettes/cet_color_schemes.html>
3.  `scico` (Scientific colormaps): <https://github.com/thomasp85/scico>

```{r, message = FALSE, warning = FALSE}
# Libraries for generating Colour palettes
library(RColorBrewer)
library(cetcolor)
library(scico)

# To view color palette 
library(unikn)   

#~~ A) User defined color palette using scico package
mypal1 = scico::scico(20, alpha = 1.0, direction =  -1, palette = "vik") 
unikn::seecol(mypal1)   

#Check: scico_palette_names() for available palettes! 
# Try combinations of alpha=0.5, direction =1, and various different color palette  

#~~ B) User defined color palette using cetcolor package
mypal2 = cetcolor::cet_pal(20, name = "r2")   
unikn::seecol(mypal2)  

# Or reverse color pal 
mypal2 = rev(cetcolor::cet_pal(20, name = "r2") )  
unikn::seecol(mypal2) 
```

#### Customizing `terra` plot options

There is a long list of customization operations available while plotting rasters in R.

We will start with basic plot from `terra`, and then explore the function by changing different customization options , such as: Try `horizontal=TRUE`, `interpolate=FALSE`, change `xlim=c(-180, 180)` with `asp=1`, or try `legend.shrink=0.4`.

```{r, message = FALSE, warning = FALSE}
sm=rast("./SampleData-master/raster_files/SMAP_SM.tif") # SMAP soil moisture data

terra::plot(sm,
            main = "Scientific Plot of Raster",
            
            #Color options
            col = mypal2,                    # User Defined Color Palette
            breaks = seq(0, 1, by=0.1),      # Sequence from 0-1 with 0.1 increment
            colNA = "lightgray",             # Color of cells with NA values
            
            # Axis options      
            axes=TRUE,                       # Plot axes: TRUE/ FALSE
            xlim=c(-180, 180),               # X-axis limit
            ylim=c(-90, 90),                 # Y-axis limit
            xlab="Longitude",                # X-axis label
            ylab="Latitue",                  # Y-axis label
            
            # Legend options      
            legend=TRUE,                     # Plot legend: TRUE/ FALSE
            
            # Miscellaneous
            mar = c(3.1, 3.1, 2.1, 7.1),     # Margins
            grid = FALSE                     # Add grid lines
        )
```

#### Spatial plotting with `tmap`

```{r, message = FALSE, warning = FALSE}
library(tmap)
# Set tmap mode: Static plot="plot", Interactive plots="view"
tmap_mode("plot")          

tmap_SM = tm_shape(sm)+
  tm_grid(alpha = 0.2)+                             # Transparency of grid
  tm_raster(alpha = 0.7,                            # Transparency of raster plot
            palette = mypal2,                       # Color pellete
            style = "pretty",                       # Select style
            title = "Volumetric Soil Moisture")+    # Plot main title
  tm_layout(legend.position = 
              c("left", "bottom"))+                 # Placement of legend
  tm_xlab("Longitude")+                             # x-lab
  tm_ylab("Latitude")                               # y-lab 

tmap_SM
```

#### Interactive raster visualization aster data with `mapview`

Functionality of `terra` is largely similar to the legacy package `raster` (created by the same developer, Robert Hijmans). The development of `terra` is inspired by computational efficiency in geospatial operations. However, since `terra` is relatively new, and is continually developed, several other packages require conversion of the `SpatRasters` to `rasterLayer` for backwards compatibility.

To convert a `SpatRaster` to `RasterLayer`, use: `sm2=as(sm, "Raster")`

```{r, message = FALSE, warning = FALSE}
library(mapview)
library(raster)

# Convert SpatRaster to raster (from package raster)
sm2=as(sm, "Raster")
mapview(sm2,                  # RasterLayer
        col.regions = mypal2, # Color palette 
        at=seq(0, 0.8, 0.1)   # Breaks
)
```
