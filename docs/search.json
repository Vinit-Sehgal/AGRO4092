[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Spatial Analysis & Visualization",
    "section": "",
    "text": "1 Introduction\nStatistical computing is essential for scientific inquiry, discovery, and storytelling. As the availability of dataset and access to computing has significantly increased over the recent years, the scope of scientific inquiry is restricted, only, by the imagination of the inquirer.\n\n“Scientific inquiry starts with observation. The more one can see, the more one can investigate” — Martin Chalfie\n\nHowever, analysis of large-scale geospatial data (regional- to global scale at high spatial and temporal resolution) can be computationally expensive and time-consuming, especially when working with multiple formats and sources of data. R- a higher-level programming language, provides a powerful computational alternative to popular Geographic Information System (GIS) software to organize, analyze and visualize geospatial datasets. R enjoys a vast collection of open-source libraries for GIS-type operations and proven statistical analysis and data visualization capabilities.\nIn this course, we equip ourselves with hands-on knowledge of accessing, analyzing, and visualizing open-source satellite remote-sensing and geospatial datasets for hydrological, agricultural, and climatological studies within the R environment. The objective of this course is to learn R for:\n\nAnalyzing geospatial datasets (raster and vector),\nPerforming statistical analysis for each feature/ layer, and,\nMapping and visualizing spatial datasets.\n\nThe course will include the latest R tools for working with global Earth-observation datasets, such as from NASA’s MODIS and SMAP satellites. Basic operations of geospatial analysis such as (re)projection, (re)sampling, summary statistics, merge/join, and (re)shape will be covered. The students will be introduced to structured/layered spatial datasets such as NetCDF and HDF formats used in climate modeling. Special emphasis will be placed on applying available out-of-the-box parallel computing techniques for geospatial analysis available in R.\nWe will first start with a refresher of basic R programming in Module 1. In Module 2 and 3, we will explore spatial data visualization, before we learn about large-scale application of parallel computing for geospatial analysis.\nPurpose of this document:\nThis resource will serve as a dynamic class note, where students can access detailed concepts, codes and exercises related to this class. Notes will be updated regularly as the class progresses with up-to-date material and upcoming assignments.\n\n\n\n\nAcknowledgement:\n\n\nWe thank Debasish Mishra (Texas A&M University) for his generous contributions to the content of this resource over the years."
  },
  {
    "objectID": "ch1.html#operators-and-data-types",
    "href": "ch1.html#operators-and-data-types",
    "title": "2  Basics of R",
    "section": "2.1 Operators and data types",
    "text": "2.1 Operators and data types\n\n2.1.1 Basic operators\nIn this section, we will learn about some basic R operators that are used to perform operations on variables. Some most commonly used operators are shown in the table below.\n\n\n\n\nR follows the conventional order (sequence) to solve mathematical operations, abbreviated as BODMAS: Brackets, Orders (exponents), Division, Multiplication, Addition, and Subtraction\n\n\n2+4+7 # Sum\n\n[1] 13\n\n4-5   # Subtraction\n\n[1] -1\n\n2*3   # Multiplication\n\n[1] 6\n\n1/2   # Division\n\n[1] 0.5\n\n# Order of operation\n1/2*3+4-5\n\n[1] 0.5\n\n1/2*(3+4-5)\n\n[1] 1\n\n1/(2*(3+4-5))\n\n[1] 0.25\n\n1/(2*3+4-5) \n\n[1] 0.2\n\n# Notice how output changes with the placement of operators\n\n# Other operators:\n2^3\n\n[1] 8\n\nlog(10)\n\n[1] 2.302585\n\nsqrt(4)\n\n[1] 2\n\npi\n\n[1] 3.141593\n\n# Clear the Environment\nrm(list=ls()) # rm is for remove,ls is short for list. The empty parenthesis i.e. () signifies all content. \n\n\n\n2.1.2 Basic data operations\nIn this section, we will create some vector data and apply built-in operations to examine the properties of a dataset.\n\n# The \"is equal to\" or \"assignment operator in R is \"&lt;-\" or \"=\" \n\n# Generate sample data. Remember \"c\" comes from for \"concatenate\". \ndata&lt;-c(1,4,2,3,9)    # Try data = c(1,4,2,3,9). Is there any difference in data in both cases?\n\n# rbind combines data by rows, and hence \"r\"bind\n# cbind combines data by columns, and hence \"c\"bind\n\n# Checking the properties of a dataset. Note: the na.rm argument ignores NA values in the dataset.\ndata=rbind(1,4,2,3,9) \ndim(data)           # [5,1]: 5 rows, 1 column\n\n[1] 5 1\n\ndata[2,1]           # Show the value in row 2, column 1\n\n[1] 4\n\ndata[c(2:5),1]      # Show a range of values in column 1\n\n[1] 4 2 3 9\n\nmean(data, na.rm=T) # Mean\n\n[1] 3.8\n\nmax(data)           # Maximum\n\n[1] 9\n\nmin(data)           # Minimum\n\n[1] 1\n\nsd(data)            # Standard deviation\n\n[1] 3.114482\n\nvar(data)           # Variance\n\n     [,1]\n[1,]  9.7\n\nsummary(data) \n\n       V1     \n Min.   :1.0  \n 1st Qu.:2.0  \n Median :3.0  \n Mean   :3.8  \n 3rd Qu.:4.0  \n Max.   :9.0  \n\nstr(data)        # Prints structure of data\n\n num [1:5, 1] 1 4 2 3 9\n\nhead(data)       # Returns the 1st 6 items in the object\n\n     [,1]\n[1,]    1\n[2,]    4\n[3,]    2\n[4,]    3\n[5,]    9\n\nhead(data, 2)    # Print first 2\n\n     [,1]\n[1,]    1\n[2,]    4\n\ntail(data, 2)    # Print last 2\n\n     [,1]\n[4,]    3\n[5,]    9\n\n# Do the same, but with \"c()\" instead of \"rbind\"\ndata=c(1,4,2,3,9) \ndim(data)        # Note: dim is NULL\n\nNULL\n\nlength(data)     # Length of a dataset is the number of variables (columns)\n\n[1] 5\n\ndata[2]          # This should give you 4 \n\n[1] 4\n\n# Other operators work in the same way\nmean(data)       # Mean\n\n[1] 3.8\n\nmax(data)        # Maximum\n\n[1] 9\n\nmin(data)        # Minimum\n\n[1] 1\n\nsd(data)         # Standard deviation\n\n[1] 3.114482\n\nvar(data)        # Variance\n\n[1] 9.7\n\n# Text data\ndata=c(\"LSU\",\"SPESS\",\"AgCenter\",\"Tigers\") \ndata             # View\n\n[1] \"LSU\"      \"SPESS\"    \"AgCenter\" \"Tigers\"  \n\ndata[1]\n\n[1] \"LSU\"\n\n# Mixed data\ndata=c(1,\"LSU\",10,\"AgCenter\") # All data is treated as text if one value is text\ndata[3]                       # Note how output is in quotes i.e. \"10\"\n\n[1] \"10\"\n\n\n\nFor help with a function in R, just type ? followed by the function to display information in the help menu. Try pasting ?sd in the console.\n\n\n\n2.1.3 Data types\nIn R, data is stored as an “array”, which can be 1-dimensional or 2-dimensional. A 1-D array is called a “vector” and a 2-D array is a “matrix”. A table in R is called a “data frame” and a “list” is a container to hold a variety of data types. In this section, we will learn how to create matrices, lists and data frames in R.\n\n\n\n\n# Lets make a random matrix\ntest_mat = matrix( c(2, 4, 3, 1, 5, 7), # The data elements \n  nrow=2,         # Number of rows \n  ncol=3,         # Number of columns \n  byrow = TRUE)   # Fill matrix by rows \n\ntest_mat = matrix( c(2, 4, 3, 1, 5, 7),nrow=2,ncol=3,byrow = TRUE) # Same result \ntest_mat\n\n     [,1] [,2] [,3]\n[1,]    2    4    3\n[2,]    1    5    7\n\ntest_mat[,2]      # Display all rows, and second column\n\n[1] 4 5\n\ntest_mat[2,]      # Display second row, all columns\n\n[1] 1 5 7\n\n# Types of datasets\nout = as.matrix(test_mat)\nout               # This is a matrix\n\n     [,1] [,2] [,3]\n[1,]    2    4    3\n[2,]    1    5    7\n\nout = as.array(test_mat)\nout               # This is also a matrix\n\n     [,1] [,2] [,3]\n[1,]    2    4    3\n[2,]    1    5    7\n\nout = as.vector(test_mat)\nout               # This is just a vector\n\n[1] 2 1 4 5 3 7\n\n# Data frame and list\ndata1=runif(50,20,30) # Create 50 random numbers between 20 and 30  \ndata2=runif(50,0,10)  # Create 50 random numbers between 0 and 10  \n\n# Lists\nout = list()        # Create and empty list\nout[[1]] = data1    # Notice the brackets \"[[ ]]\" instead of \"[ ]\"\nout[[2]] = data2\nout[[1]]          # Contains data1 at this location\n\n [1] 28.64537 25.72854 26.40734 28.58172 29.76374 20.85026 26.36933 20.74820\n [9] 25.89007 24.67047 23.67482 24.93350 25.81726 22.02903 20.88031 28.07916\n[17] 24.92968 28.93314 28.12485 29.91537 25.73241 24.22310 22.43000 29.82392\n[25] 21.11135 26.08349 26.81197 20.98303 20.72340 22.07618 25.09631 20.59044\n[33] 21.39970 26.92108 20.91009 28.13618 26.31502 27.30386 26.41957 26.94713\n[41] 28.91431 24.58794 22.28979 20.55603 27.37446 25.03268 26.75551 27.18269\n[49] 22.70198 29.03120\n\n# Data frame\nout=data.frame(x=data1, y=data2)\n\n# Let's see how it looks!\nplot(out$x, out$y)\n\n\n\nplot(out[,1])\n\n\n\n\n\nFor a data frame, the dollar “$” sign invokes the variable selection. Imagine how one would receive merchandise in a store if you give $ to the cashier. Data frame will list out the variable names for you of you when you show it some $."
  },
  {
    "objectID": "ch1.html#plotting-with-base-r",
    "href": "ch1.html#plotting-with-base-r",
    "title": "2  Basics of R",
    "section": "2.2 Plotting with base R",
    "text": "2.2 Plotting with base R\nIf you need to quickly visualize your data, base R has some functions that will help you do this in a pinch. In this section we’ll look at some basics of visualizing univariate and multivariate data.\n\n2.2.1 Overview\n\n# Create 50 random numbers between 0 and 100  \ndata=runif(50, 0, 100)   #runif stands for random numbers from a uniform distribution\n\n# Let's plot the data\nplot(data)            # The \"plot\" function initializes the plot.\n\n\n\nplot(data, type=\"l\")  # The \"type\" argument changes the plot type. \"l\" calls up a line plot\n\n\n\nplot(data, type=\"b\")  # Buffered points joined by lines\n\n\n\n# Try options type = \"o\" and type = \"c\" as well.\n\n# We can also quickly visualize boxplots, histograms, and density plots using the same procedure\nboxplot(data)        # Box-and-whisker plot\n\n\n\nhist(data)           # Histogram points\n\n\n\nplot(density(data))  # Plot with density distribution \n\n\n\n\n\n\n2.2.2 Plotting univariate data\nLet’s dig deeper into the plot function. Here, we will look at how to adjust the colors, shapes, and sizes for markers, axis labels and titles, and the plot title.\n\n# Line plots\nplot(data,type=\"o\", col=\"red\",\n     xlab=\"x-axis title\",ylab =\"y-axis title\", \n     main=\"My plot\", # Name of axis labels and title\n     cex.axis=2, cex.main=2,cex.lab=2,            # Size of axes, title and label\n     pch=23,       # Change marker style\n     bg=\"red\",     # Change color of markers\n     lty=5,        # Change line style\n     lwd=2         # Selecting line width\n) \n# Adding legend\nlegend(1, 100, legend=c(\"Data 1\"),\n       col=c(\"red\"), lty=2, cex=1.2)\n\n\n\n# Histograms\nhist(data,col=\"red\",\n     xlab=\"Number\",ylab =\"Value\", main=\"My plot\", # Name of axis labels and title\n     border=\"blue\"\n) \n\n\n\n# Try adjusting the parameters:\n# hist(data,col=\"red\",\n#      xlab=\"Number\",ylab =\"Value\", main=\"My plot\", # Name of axis labels and title\n#      cex.axis=2, cex.main=2,cex.lab=2,            # Size of axes, title and label\n#      border=\"blue\", \n#      xlim=c(0,100), # Control the limits of the x-axis\n#      las=0,      # Try different values of las: 0,1,2,3 to rotate labels\n#      breaks=5    # Try using 5,20,50, 100\n# ) # Using more options and controls\n\n\n\n2.2.3 Plotting multivariate data\nHere, we introduce you to data frames: equivalent of tables in R. A data frame is a table with a two-dimensional array-like structure in which each column contains values of one variable and each row contains one set of values from each column.\n\nplot_data=data.frame(x=runif(50,0,10), \n                     y=runif(50,20,30), \n                     z=runif(50,30,40)) \n\nplot(plot_data$x, plot_data$y) # Scatter plot of x and y data\n\n\n\n# Mandatory beautification\nplot(plot_data$x,plot_data$y, xlab=\"Data X\", ylab=\"Data Y\", main=\"X vs Y plot\",\n     col=\"darkred\",pch=20,cex=1.5) # Scatter plot of x and y data\n\n\n\n# Multiple lines on one axis\nmatplot(plot_data, type = c(\"b\"),pch=16,col = 1:4) \n\n\n\nmatplot(plot_data, type = c(\"b\",\"l\",\"o\"),pch=16,col = 1:4) # Try this now. Any difference? \nlegend(\"topleft\", legend = 1:4, col=1:4, pch=1)            # Add legend to a top left\nlegend(\"top\", legend = 1:4, col=1:4, pch=1)                # Add legend to at top center\nlegend(\"bottomright\", legend = 1:4, col=1:4, pch=1)        # Add legend at the bottom right\n\n\n\n\n\n\n2.2.4 Time series data\nWorking with time series data can be tricky at first, but here’s a quick look at how to quickly generate a time series using the as.Date function.\n\ndate=seq(as.Date('2011-01-01'),as.Date('2011-01-31'),by = 1) # Generate a sequence 31 days\ndata=runif(31,0,10)                 # Generate 31 random values between 0 and 10\ndf=data.frame(Date=date,Value=data) # Combine the data in a data frame\nplot(df,type=\"o\")\n\n\n\n\n\n\n2.2.5 Combining plots\nYou can built plots that contain subplots. Using base R, we call start by using the “par” function and then plot as we saw before.\n\npar(mfrow=c(2,2)) # Call a plot with 4 quadrants\n\n# Plot 1\nmatplot(plot_data, type = c(\"b\"),pch=16,col = 1:4) \n\n# Plot 2\nplot(plot_data$x,plot_data$y) \n\n# Plot 3\nhist(data,col=\"red\",\n     xlab=\"Number\",ylab =\"Value\", main=\"My plot\", \n     border=\"blue\") \n\n# Plot4\nplot(data,type=\"o\", col=\"red\",\n     xlab=\"Number\",ylab =\"Value\", main=\"My plot\",\n     cex.axis=2, cex.main=2,cex.lab=2, \n     pch=23,   \n     bg=\"red\", \n     lty=5, \n     lwd=2 \n) \n\n\n\n# Alternatively, we can call up a plot using a matrix\nmatrix(c(1,1,2,3), 2, 2, byrow = TRUE) # Plot 1 is plotted for first two spots, followed by plot 2 and 3 \n\n     [,1] [,2]\n[1,]    1    1\n[2,]    2    3\n\nlayout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE)) # Fixes a layout of the plots we want to make\n\n # Plot 1\nmatplot(plot_data, type = c(\"b\"),pch=16,col = 1:4)\n\n# Plot2\nplot(plot_data$x,plot_data$y) \n\n# Plot 3\nhist(data,col=\"red\",\n     xlab=\"Number\",ylab =\"Value\", main=\"My plot\",\n     border=\"blue\"\n)\n\n\n\n\n\n\n2.2.6 Saving figures to disk\nPlots can be saved as image files or a PDF. This is done by specifying the output file type, its size and resolution, then calling the plot.\n\npng(\"awesome_plot.png\", width=4, height=4, units=\"in\", res=400) \n#Tells R we will plot image in png of given specification\n\nmatplot(plot_data, type = c(\"b\",\"l\",\"o\"),pch=16,col = 1:4)  \nlegend(\"topleft\", legend = 1:4, col=1:4, pch=1)\n\ndev.off() # Very important: this sends the image to disc\n\npng \n  2 \n\n# Keep pressing till you get the following: \n# Error in dev.off() : cannot shut down device 1 (the null device) \n# This ensures that we are no longer plotting.\n\n# It looks like what everything we just plotted was squeezed together to tightly. Let's change the size.\npng(\"awesome_plot.png\", width=6, height=4, units=\"in\", res=400)  #note change in dimension\n#Tells R we will plot image in png of given specification\n\nmatplot(plot_data, type = c(\"b\",\"l\",\"o\"),pch=16,col = 1:3)  \nlegend(\"topleft\", legend = 1:3, col=1:3, pch=16)\n\ndev.off() \n\npng \n  2 \n\n\n\nSome useful resources\nIf you want to plot something a certain way and don’t know how to do it, the chances are that someone has asked that question before. Try a Google search for what your are trying to do and check out some of the forums. There is TONS of material online. Here are some additional resources:\n\nThe R Graph Gallery: https://www.r-graph-gallery.com/\nGraphical parameters: https://www.statmethods.net/advgraphs/parameters.html\nPlotting in R: https://www.harding.edu/fmccown/r/\nHistogram: https://www.r-bloggers.com/how-to-make-a-histogram-with-basic-r/"
  },
  {
    "objectID": "ch1.html#plotting-with-ggplot2",
    "href": "ch1.html#plotting-with-ggplot2",
    "title": "2  Basics of R",
    "section": "2.3 Plotting with ggplot2",
    "text": "2.3 Plotting with ggplot2\n\n2.3.1 Import libraries and create sample dataset\nFor this section, we will use the ggplot2, gridExtra, utils, and tidyr packages. gridExtra and cowplot are used to combine ggplot objects into one plot and utils and tidyr are useful for manipulating and reshaping the data. We will also install some packages here that will be required for the later sections. You will find more information in the sections to follow.\n\n###############################################################\n#~~~ Load required libraries\nlib_names=c(\"ggplot2\",\"gridExtra\",\"utils\",\"tidyr\",\"cowplot\", \"RColorBrewer\")\n\n# If you see a prompt: Do you want to restart R prior to installing: Select **No**. \n\n# Install all necessary packages (Run once)\n# invisible(suppressMessages\n#           (suppressWarnings\n#             (lapply\n#               (lib_names,install.packages,repos=\"http://cran.r-project.org\",\n#                 character.only = T))))\n\n# Load necessary packages\ninvisible(suppressMessages\n          (suppressWarnings\n            (lapply\n              (lib_names,library, character.only = T))))\n\nIn more day-to-day use, you will see yourself using a simpler version of these commands, such as, if you were to install the “ggplot2”,“gridExtra” libraries, you will type:\n\n# To install the package. Install only once\ninstall.packages(\"ggplot2\")\n# To initialize the package. Invoke every time a new session begins.\nlibrary(ggplot2)\n\nSimilarly, again for gridExtra ,\n\ninstall.packages(\"gridExtra\")\nlibrary(gridExtra)\n\nFor this exercise, let us generate a sample dataset.\n\n###############################################################\n#~~~ Generate a dataset containing random numbers within specified ranges\nYear = seq(1913,2001,1)\nJan = runif(89, -18.4, -3.2)\nFeb = runif(89, -19.4, -1.2)\nMar = runif(89, -14, -1.8)\nJanuary = runif(89, 1, 86)\ndat = data.frame(Year, Jan, Feb, Mar, January)\n\n\n\n2.3.2 Basics of ggplot\nWhereas base R has an “ink on paper” plotting paradigm, ggplot has a “grammar of graphics” paradigm that packages together a variety plotting functions. With ggplot, you assign the result of a function to an object name and then modify it by adding additional functions. Think of it as adding layers using pre-designed functions rather than having to build those functions yourself, as you would have to do with base R.\n\nl1 = ggplot(data=dat, aes(x = Year, y = Jan, color = \"blue\")) + # Tell which data to plot\n  geom_line() +      # Add a line\n  geom_point() +     # Add a points\n  xlab(\"Year\") +     # Add labels to the axes\n  ylab(\"Value\")\n\n# Or, they can be specified for any individual geometry\nl1 + geom_line(linetype = \"solid\", color=\"Blue\")  # Add a solid line\n\n\n\nl1 + geom_line(aes(x = Year, y = January)) # Add a different data set\n\n\n\n# There are tons of other built-in color scales and themes, such as scale_color_grey(), scale_color_brewer(), theme_classic(), theme_minimal(), and theme_dark()\n\n# OR, CREATE YOUR OWN THEME! You can group themes together in one list\ntheme1 = theme(\n  legend.position = \"none\",\n  panel.background = element_blank(),\n  plot.title = element_text(hjust = 0.5),\n  axis.line = element_line(color = \"black\"),\n  axis.text.y   = element_text(size = 11),\n  axis.text.x   = element_text(size = 11),\n  axis.title.y  = element_text(size = 11),\n  axis.title.x  = element_text(size = 11),\n  panel.border = element_rect(\n    colour = \"black\",\n    fill = NA,\n    size = 0.5\n  )\n)\n\n\n\n2.3.3 Multivariate plots\nFor multivariate data, ggplot takes the data in the form of groups. This means that each data row should be identifiable to a group. To get the most out of ggplot, we will need to reshape our dataset.\n\nlibrary(tidyr)\n\n# There are two generally data formats: wide (horizontal) and long (vertical). In the horizontal format, every column represents a category of the data. In the vertical format, every row represents an observation for a particular category (think of each row as a data point). Both formats have their comparative advantages. We will now convert the data frame we randomly generated in the previous section to the long format. Here are several ways to do this:\n\n# Using the gather function (the operator %&gt;% is called pipe operator)\ndat2 = dat %&gt;% gather(Month, Value, -Year)\n\n# This is equivalent to: \ndat2 = gather(data=dat, Month, Value, -Year)\n\n# Using pivot_longer and selecting all of the columns we want. This function is the best!\ndat2 = dat %&gt;% pivot_longer(cols = c(Jan, Feb, Mar), names_to = \"Month\", values_to = \"Value\") \n\n# Or we can choose to exclude the columns we don't want\ndat2 = dat %&gt;% pivot_longer(cols = -c(Year,January), names_to = \"Month\", values_to = \"Value\") \n\nhead(dat2) # The data is now shaped in the long format\n\n# A tibble: 6 × 4\n   Year January Month  Value\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;\n1  1913    21.7 Jan   -17.2 \n2  1913    21.7 Feb    -9.26\n3  1913    21.7 Mar   -10.9 \n4  1914    23.9 Jan   -10.7 \n5  1914    23.9 Feb   -12.9 \n6  1914    23.9 Mar    -3.93\n\n\nLine plot\n\n# LINE PLOT\nl = ggplot(dat2, aes(x = Year, y = Value, group = Month)) +\n  geom_line(aes(color = Month)) +\n  geom_point(aes(color = Month))\nl\n\n\n\n\nDensity plot\n\n# DENSITY PLOT\nd = ggplot(dat2, aes(x = Value))\nd = d + geom_density(aes(color = Month, fill = Month), alpha=0.4) # Alpha specifies transparency\nd\n\n\n\n\nHistogram\n\n# HISTOGRAM\nh = ggplot(dat2, aes(x = Value))\nh = h + geom_histogram(aes(color = Month, fill = Month), alpha=0.4,\n                 fill = \"white\",\n                 position = \"dodge\")\nh\n\n\n\n\nGrid plotting and saving files to disk\nThere are multiple ways to arrange multiple plots and save images. One method is using grid.arrange() which is found in the gridExtra package. You can then save the file using ggsave, which comes with the ggplot2 library.\n\n# The plots can be displayed together on one image using \n# grid.arrange from the gridExtra package\nimg = grid.arrange(l, d, h, nrow=3)\n\n\n\n# Finally, plots created using ggplot can be saved using ggsave\nggsave(\"grid_plot_1.png\", \n       plot = img, \n       device = \"png\", \n       width = 6, \n       height = 4, \n       units = c(\"in\"), \n       dpi = 600)\n\nAnother approach is to use the plot_grid function, which is in the cowplot library. Notice how the axes are now beautifally aligned.\n\nimg2=cowplot::plot_grid(l, d, h, nrow = 3, align = \"v\") # \"v\" aligns vertical axes and \"h\" aligns horizontal axes\n\nggsave(\"grid_plot_2.png\", \n       plot = img2, \n       device = \"png\", \n       width = 6, \n       height = 4, \n       units = c(\"in\"), \n       dpi = 600)\n\n\n\n2.3.4 Using patchwork for combining ggplots\nPatchwork works with simple operators to combine plots. The operator | arranges plots in a row. The plus sign + does the same but it will try to wrap the plots symmetrically as a square whenever possible. The division i.e. /operator layers a plot on top of another.\n\n#install.packages(\"patchwork\")\nlibrary(patchwork)\n\nl+d\n\n\n\nl/ (h+d)\n\n\n\n# Try: l/d/h or (l+d)/h \n\n# Make your own design for arranging plots (the # sign means empty space): \ndesign &lt;- \"\n  111\n  2#3\n\"\nl + d + h + plot_layout(design = design)\n\n\n\n\n\nSome useful resources\nThe links below offer a treasure trove of examples and sample code to get you started.\n\nThe R Graph Gallery: https://www.r-graph-gallery.com/\nR charts: https://r-charts.com/\nExcellent resource for combining multiple ggplots: https://r-charts.com/ggplot2/combining-plots/"
  },
  {
    "objectID": "ch1.html#exercise-1",
    "href": "ch1.html#exercise-1",
    "title": "2  Basics of R",
    "section": "2.4 Exercise #1",
    "text": "2.4 Exercise #1\nThe U.S. Climate Reference Network (USCRN) is a systematic and sustained network of climate monitoring stations. USCRN has sites across Contiguous U.S. along with some in Alaska, and Hawaii. These stations are instrumented to measure meteorological information such as temperature, precipitation, wind speed, along with other relevant hydrologic variables such as soil moisture at uniform depths (5, 10, 20, 50, 100 cm) at sub-hourly, daily and monthly time scales. Users can access daily data set from all station suing the following link: Index of /pub/data/uscrn/products/daily01 (noaa.gov)\nLet us extract sample data from a USCRN site in Lafayette, LA, USA for 2021.\n\n# Yearly data from the sample station\nCRNdat = read.csv(url(\"https://www.ncei.noaa.gov/pub/data/uscrn/products/daily01/2021/CRND0103-2021-LA_Lafayette_13_SE.txt\"), header=FALSE,sep=\"\")\n\n# Data headers\nheaders=read.csv(url(\"https://www.ncei.noaa.gov/pub/data/uscrn/products/daily01/headers.txt\"), header=FALSE,sep=\"\")\n\n# Column names as headers from the text file\ncolnames(CRNdat)=headers[2,1:ncol(CRNdat)]\n\n# Replace fill values with NA\nCRNdat[CRNdat == -9999]=NA\nCRNdat[CRNdat == -99]=NA\nCRNdat[CRNdat == 999]=NA\n\n# View data sample\nlibrary(kableExtra)\ndataTable = kbl(head(CRNdat,6),full_width = F)\nkable_styling(dataTable,bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"))\n\n\n\n\n\nWBANNO\nLST_DATE\nCRX_VN\nLONGITUDE\nLATITUDE\nT_DAILY_MAX\nT_DAILY_MIN\nT_DAILY_MEAN\nT_DAILY_AVG\nP_DAILY_CALC\nSOLARAD_DAILY\nSUR_TEMP_DAILY_TYPE\nSUR_TEMP_DAILY_MAX\nSUR_TEMP_DAILY_MIN\nSUR_TEMP_DAILY_AVG\nRH_DAILY_MAX\nRH_DAILY_MIN\nRH_DAILY_AVG\nSOIL_MOISTURE_5_DAILY\nSOIL_MOISTURE_10_DAILY\nSOIL_MOISTURE_20_DAILY\nSOIL_MOISTURE_50_DAILY\nSOIL_MOISTURE_100_DAILY\nSOIL_TEMP_5_DAILY\nSOIL_TEMP_10_DAILY\nSOIL_TEMP_20_DAILY\nSOIL_TEMP_50_DAILY\nSOIL_TEMP_100_DAILY\n\n\n\n\n53960\n20210101\n2.622\n-91.87\n30.09\n14.0\n5.2\n9.6\n11.0\n0.0\n12.16\nC\n18.7\n4.6\n11.6\n92.8\n49.3\n72.0\n0.401\n0.372\n0.380\n0.405\n0.381\n16.2\n15.3\n15.5\n15.7\n15.5\n\n\n53960\n20210102\n2.622\n-91.87\n30.09\n10.4\n1.9\n6.1\n6.5\n0.0\n8.95\nC\n15.3\n0.4\n7.3\n98.6\n61.6\n78.4\n0.396\n0.370\n0.377\n0.406\n0.376\n14.4\n13.3\n14.1\n15.2\n15.0\n\n\n53960\n20210103\n2.622\n-91.87\n30.09\n16.3\n-0.1\n8.1\n7.9\n0.0\n13.93\nC\n24.3\n-0.9\n9.5\n100.0\n42.1\n76.3\n0.392\n0.368\n0.374\n0.404\n0.373\n12.8\n11.8\n12.8\n14.4\n14.2\n\n\n53960\n20210104\n2.622\n-91.87\n30.09\n22.2\n3.7\n12.9\n12.5\n0.0\n11.56\nC\n26.4\n2.6\n13.2\n98.9\n47.7\n80.2\n0.389\n0.366\n0.370\n0.400\n0.372\n13.0\n12.2\n12.7\n14.0\n14.0\n\n\n53960\n20210105\n2.622\n-91.87\n30.09\n20.7\n4.5\n12.6\n11.4\n0.0\n14.37\nC\n28.9\n3.1\n13.3\n100.0\n27.7\n71.0\n0.388\n0.364\n0.368\n0.399\n0.369\n13.0\n12.1\n12.7\n13.9\n14.0\n\n\n53960\n20210106\n2.622\n-91.87\n30.09\n19.4\n4.9\n12.2\n12.6\n20.7\n9.79\nC\n23.1\n3.5\n12.8\n98.5\n54.7\n78.9\n0.390\n0.363\n0.369\n0.399\n0.370\n12.8\n12.1\n12.5\n13.7\n13.7\n\n\n\n\n\n\n\n\nNotice the variables provided in the dataset. As an example, we can plots soil moisture data from a depth of 20 cm for this station for our reference:\n\n# Sample plot for soil moisture\nx=CRNdat$SOIL_MOISTURE_20_DAILY\n\n# Plot time series and density distribution \nplot(x, type=\"l\", ylab=\"Soil moisture (v/v)\", \n     col=\"cyan4\", lwd=3)\nplot(density(na.omit(x)), main=\" \", xlab=\"\", \n     col=\"cyan4\", lwd=3)\n\n\n\n\n\n\n\n(a) Time series of SM\n\n\n\n\n\n\n\n(b) SM kernel density\n\n\n\n\nFigure 2.1: Soil moisture values at the selected USCRN station\n\n\n\nExercise:\n\nTaking examples of any two USCRN stations across contrasting hydroclimates, compare and contrast any two recorded variables using time series plots, probability density distribution histograms and scatter plots. Select any year of your liking for the analysis.\nSelect two seasons for each elected variable and demonstrate the seasonal variability in the records for summer (MAMJJA) and winter (SONDJF) seasons using any two types of multivariate plots.\n[EXTRA]: For any chosen station, plot a time-series of soil moisture from all available layers with precipitation added as an inverted secondary axis. For inspiration, see Figure 4 in Cheng, et al. 2021. On change of soil moisture distribution with vegetation reconstruction in Mu Us sandy land of China, with newly designed lysimeter. Frontiers in Plant Science, 12, p.60952 at https://www.frontiersin.org/articles/10.3389/fpls.2021.609529/full"
  },
  {
    "objectID": "ch2.html",
    "href": "ch2.html",
    "title": "3  Spatial Mapping in R",
    "section": "",
    "text": "4 Spatial Mapping in R"
  },
  {
    "objectID": "ch2.html#import-libraries-and-sample-dataset",
    "href": "ch2.html#import-libraries-and-sample-dataset",
    "title": "3  Spatial Mapping in R",
    "section": "4.1 Import libraries and sample dataset",
    "text": "4.1 Import libraries and sample dataset\nWe will begin by loading necessary libraries. The sample dataset for this exercise can be downloaded manually from GitHub by accessing https://github.com/Vinit-Sehgal/SampleData \n\n\n\n\nAlternatively, use the following code to download and extract the sample data from GitHub repository.\nInstall all necessary packages (Run once).\n\n###############################################################\n#~~~ Load required libraries\nlib_names=c(\"terra\", \"tidyterra\", \"cetcolor\", \"scico\", \"tmap\",    \n            \"gifski\", \"lubridate\",\"Rcpp\",\n            \"raster\",\"ggplot2\",\"unikn\",\"mapview\",\n            \"gridExtra\",\"rgdal\",\"fields\",\n            \"RColorBrewer\",\"ncdf4\",\"rasterVis\",\n            \"rcartocolor\",\"pacman\",\"purrr\",\"moments\",\"tictoc\", \n            \"sf\", \"sp\", \"exactextractr\",\"readxl\", \n            \"snow\",\"future.apply\",\"parallel\")\n\n\n# Load necessary packages\ninvisible(suppressMessages\n          (suppressWarnings\n            (lapply\n              (lib_names, require, character.only = T))))\n\n# An easy way to load multiple packages is through pacman::p_load\n# pacman::p_load(\"raster\",\"ggplot2\",\"unikn\",\"mapview\",\n#             \"gridExtra\",\"rgdal\",\"fields\",\n#             \"RColorBrewer\",\"ncdf4\",\"rasterVis\", \"moments\", \"tictoc\", \"tibble\")\n\n# Update packages if they are already installed\n# update.package(ask = FALSE)\n\nNote: The legacy R spatial infrastructure packages - maptools, rgdal and rgeos have been archived by CRAN from October 16, 2023; these retired packages will continue to be available as source packages on https://cran.r-project.org/src/contrib/Archive but won’t undergo any further development.  We will now download the workshop repository, which contains all data we will use for this exercise.\n\n###############################################################\n#~~~ Import sample data from GitHub repository\ndownload.file(url = \"https://github.com/Vinit-Sehgal/SampleData/archive/master.zip\",\ndestfile = \"SampleData-master.zip\")    # Download \".Zip\"\n\n# Unzip the downloaded .zip file\nunzip(zipfile = \"SampleData-master.zip\")\n# getwd()                           # Current working directory\nlist.files(\"./SampleData-master\")   # List folder contents\n\n [1] \"CMIP_land\"                               \n [2] \"functions\"                               \n [3] \"images\"                                  \n [4] \"Largescale_geospatial_analysis_2022.html\"\n [5] \"Largescale_geospatial_analysis_2023.html\"\n [6] \"location_points.xlsx\"                    \n [7] \"ne_10m_coastline\"                        \n [8] \"raster_files\"                            \n [9] \"README.md\"                               \n[10] \"sample_pdfs\"                             \n[11] \"SMAP_L3_USA.nc\"                          \n[12] \"SMAPL4_H5\"                               \n[13] \"SMOS_nc\"                                 \n[14] \"USA_states\"                              \n[15] \"Workbook_DVGAR21-Part1.html\"             \n[16] \"Workbook_DVGAR21-Part2.html\""
  },
  {
    "objectID": "ch2.html#raster-and-shapefile-visualization",
    "href": "ch2.html#raster-and-shapefile-visualization",
    "title": "3  Spatial Mapping in R",
    "section": "4.2 Raster and shapefile visualization",
    "text": "4.2 Raster and shapefile visualization\nA geographic information system, or GIS refers to a platform which can map, analyzes and manipulate geographically referenced dataset. A geographically referenced data (or geo-referenced data) is a spatial dataset which can be related to a point on Earth with the help of geographic coordinates. Types of geo-referenced spatial data include: rasters (grids of regularly sized pixels) and vectors (polygons, lines, points).\n\n\n\n\n\nA quick and helpful review of spatial data can be found here: https://spatialvision.com.au/blog-raster-and-vector-data-in-gis/\n\n4.2.1 Plotting raster data\nIn this section, we will plot global raster data of surface (~5 cm) soil moisture from SMAP. In this process we will explore functions from terra, and tidyterra packages.\nLet’s start by importing the necessary packages.\n# For raster operations\nlibrary(terra)\n\n# For plotting operations\nlibrary(tidyterra) \nlibrary(tmap)\nlibrary(ggplot2)\nlibrary(mapview)  \n\n# For Perceptually Uniform Colour palettes\nlibrary(cetcolor)\nlibrary(scico)\n \n# Import SMAP soil moisture raster from the downloaded folder\nsm=terra::rast(\"./SampleData-master/raster_files/SMAP_SM.tif\")\nOnce we have imported the Spatraster using rast() function from terra package, let’s now check its attributes. Notice the dimensions, resolution, extent, crs i.e. coordinate reference system and values. Note that the cell of one raster layer can only hold a single value. The value might be numeric or categorical!\n\nprint(sm)\n\nclass       : SpatRaster \ndimensions  : 456, 964, 1  (nrow, ncol, nlyr)\nresolution  : 0.373444, 0.373444  (x, y)\nextent      : -180, 180, -85.24595, 85.0445  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : SMAP_SM.tif \nname        :    SMAP_SM \nmin value   : 0.01999998 \nmax value   : 0.87667608 \n\n# Try:\n# dim(sm)   # Dimension (nrow, ncol, nlyr) of the raster\n# terra::res(sm)   # X-Y resolution of the raster\n# terra::ext(sm)   # Spatial extent of the raster\n# terra::crs(sm)   # Coordinate reference system\n\nNow let’s plot the raster using terra::plot. Interactive plots can be made by using mapview function.\n# Basic Raster plot\nterra::plot(sm, main = \"Soil Moisture\")\n\nWhat are the different features of the above plot?\nExpert Note: terra’s functionality is largely the same as the more mature raster package (created by the same developer, Robert Hijmans), but are usually more computationally efficient than raster equivalents. However, one can seamlessly translate between the two types of object to ensure backwards compatibility with older scripts and packages, for example, with the functions raster(), stack(), and brick() in the raster package."
  },
  {
    "objectID": "ch2.html#customizing-terra-plot-options",
    "href": "ch2.html#customizing-terra-plot-options",
    "title": "3  Spatial Mapping in R",
    "section": "4.3 Customizing terra plot options",
    "text": "4.3 Customizing terra plot options\n\n4.3.1 Scientific Color palettes\nWe will generate custom color palettes for better visualization. We will demonstrate the usage of cetcolor and scico package which provide access to the perceptually uniform and colour-blindness friendly palettes.\n\n\nYou can select CET colormaps from: https://cran.r-project.org/web/packages/cetcolor/vignettes/cet_color_schemes.html\nYou can select scico colormaps from: https://github.com/thomasp85/scico\nR Color Brewer is also a great resource for popular colormaps: https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3\n\n\n# Make custom color palette\nlibrary(unikn) \n\n#~~ A) User defined color palette using scico library\nmypal1 = scico(20, alpha = 1.0, direction =  -1, palette = \"vik\")\nunikn::seecol(mypal1)\n\n\n\n#Check: scico_palette_names() for available palettes!\n# Try combinations of alpha=0.5, direction =1, and various different color palette\n\n#~~ B) User defined color palette using cetcolor library\nmypal2 = cetcolor::cet_pal(20, name = \"r2\")  \nunikn::seecol(mypal2)\n\n\n\n# Or reverse color pal\nmypal2 = rev(cetcolor::cet_pal(20, name = \"r2\") ) \nunikn::seecol(mypal2)\n\n\n\n\n\n\n4.3.2 Customize terra plots\nThere is a long list of customizable operations available while plotting rasters in R. Let’s play with some of these options. We will start with basic plot from terra, and then venture into more powerful tmap and tidyterra packages. Try horizontal=TRUE, interpolate=FALSE, change xlim=c(-180, 180) with asp=1, or try legend.shrink=0.4.\n\nsm=rast(\"./SampleData-master/raster_files/SMAP_SM.tif\") # SMAP soil moisture data\n\nterra::plot(sm,\n            main = \"Scientific Plot of Raster\",\n            \n            #Color options\n            col = mypal2,                    # User Defined Color Palette\n            breaks = seq(0, 1, by=0.1),      # Sequence from 0-1 with 0.1 increment\n            colNA = \"lightgray\",             # Color of cells with NA values\n            \n            # Axis options      \n            axes=TRUE,                       # Plot axes: TRUE/ FALSE\n            xlim=c(-180, 180),               # X-axis limit\n            ylim=c(-90, 90),                 # Y-axis limit\n            xlab=\"Longitude\",                # X-axis label\n            ylab=\"Latitue\",                  # Y-axis label\n            \n            # Legend options      \n            legend=TRUE,                     # Plot legend: TRUE/ FALSE\n            \n            # Miscellaneous\n            mar = c(3.1, 3.1, 2.1, 7.1),     #Margins\n            grid = FALSE                     #Add grid lines\n        )\n\n\n\n#Plotting through tmap:\ntmap_mode(\"plot\")  #Setting tmap mode: Static plots by \"plot\", Interactive plots by\"view\"\n\ntmap_SM = tm_shape(sm)+\n  tm_grid(alpha = 0.2)+\n  tm_raster(alpha = 0.7, palette = mypal2, \n            style = \"pretty\", title = \"Volumetric Soil Moisture\")+\n  tm_layout(legend.position = c(\"left\", \"bottom\"))+\n  tm_xlab(\"Longitude\")+ tm_ylab(\"Latitude\")\n\ntmap_SM\n\n\n\n\nTo convert the static plot into an interactive map we will use mapview package which which is compatible with rasterbrick.\n\n# Interactive plot\nlibrary(mapview)\nlibrary(raster)\n\nmapview(brick(sm),            # Convert SpatRaster to RasterBrick\n        col.regions = mypal2, # Color palette \n        at=seq(0, 0.8, 0.1)   # Breaks\n        )"
  },
  {
    "objectID": "ch2.html#plotting-raster-data-using-tidyterra",
    "href": "ch2.html#plotting-raster-data-using-tidyterra",
    "title": "3  Spatial Mapping in R",
    "section": "4.4 Plotting raster data using tidyterra",
    "text": "4.4 Plotting raster data using tidyterra\ntidyterra is a package that add common methods from the tidyverse for SpatRaster and SpatVectors objects created with the {terra} package. It also adds specific geom_spat*() functions for plotting these kind of objects with {ggplot2}.\nNote on Performance: tidyterra is conceived as a user-friendly wrapper of {terra} using the {tidyverse} methods and verbs. This approach therefore has a cost in terms of performance.\n\nlibrary(tidyterra)\nlibrary(ggplot2)\n\nggplot() +\n  geom_spatraster(data = sm) +\n  scale_fill_gradientn(colors=mypal2,                               # Use user-defined colormap\n                       name = \"SM\",                                 # Name of the colorbar\n                       na.value = \"transparent\",                    # transparent NA cells\n                       labels=(c(\"0\", \"0.2\", \"0.4\", \"0.6\", \"0.8\")), # Labels of colorbar\n                       breaks=seq(0,0.8,by=0.2),                    # Set breaks of colorbar\n                       limits=c(0,0.8))+\n  theme_void()  # Try different themes: theme_bw(), theme_gray(), theme_minimal()\n\n\n\n\nWhat if we are interested in a particular region and not the entire globe? We can plot the map for a specific extent (CONUS, in this case) by changing the range of coord_sfoption. We will also use a different theme: theme_bw. Try xlim = c(114,153) and ylim = c(-43,-11)!\n\nsm_conus= ggplot() +\n  geom_spatraster(data = sm) +\n  scale_fill_gradientn(colors=mypal2,                               # Use user-defined colormap\n                       name = \"SM\",                                 # Name of the colorbar\n                       na.value = \"transparent\",                    # transparent NA cells\n                       labels=(c(\"0\", \"0.2\", \"0.4\", \"0.6\", \"0.8\")), # Labels of colorbar\n                       breaks=seq(0,0.8,by=0.2),                    # Set breaks of colorbar\n                       limits=c(0,0.8)) +\n  coord_sf(xlim = c(-125,-67),                                      # Add extent for CONUS\n              ylim = c(24,50))+               \n  theme_bw()                                                        # Try black-and-white theme. \n\nprint(sm_conus)\n\n\n\n\ntmap provides the easiest way of manipulating the legends from continuous to discrete by just adding the style of color scale desired by the user.\n\n#We will manipulate the existing tmap_SM plot by adding style parameter:\ntmap_SM = tm_shape(sm)+\n  tm_grid(alpha = 0.2)+\n  tm_raster(alpha = 0.7, style = \"pretty\", \n            palette = mypal2,  title = \"Volumetric Soil Moisture\") +\n  tm_layout(legend.position = c(\"left\",\"bottom\"), inner.margins = 0)+           #Adjust the legend position\n   tm_xlab(\"Longitude\")+ tm_ylab(\"Latitude\")  \n\ntmap_SM\n\n\n\n#Using breaks would give more control on scale discretization\ntm_shape(sm)+\n  tm_grid(alpha = 0.2)+\n  tm_raster(alpha = 0.7, breaks = c(0.00, 0.25, 0.50, 0.75, 1.00), \n            palette = mypal2,  title = \"Volumetric Soil Moisture\") +\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = c(\"right\",\"top\"),\n            inner.margins = 0)+\n  tm_xlab(\"Longitude\")+ tm_ylab(\"Latitude\")\n\n\n\n# Saving the plot to disk:\ntmap_save(tmap_SM,                    # tmap object\n          filename = \"sm_world.png\",  # filename including extension\n          dpi = 300,                  # dots per inch\n          height = 5,\n          width = 5,\n          units = \"in\")               #units for width and height"
  },
  {
    "objectID": "ch2.html#plotting-vector-data",
    "href": "ch2.html#plotting-vector-data",
    "title": "3  Spatial Mapping in R",
    "section": "4.5 Plotting vector data",
    "text": "4.5 Plotting vector data\nImporting and plotting shapefiles is equally easy in R. We will import the shapefile of the updated global IPCC climate reference regions (https://doi.org/10.5194/essd-12-2959-2020) as Simple Feature (sf) Object. We will also use global coastline shapefile from the web for plotting.\nNote: Even though terra provides vect() function to handle vector data, sf package is most suitable and powerful for manipulating and plotting purposes.\n\n###############################################################\n#~~~ PART 1.4.1: Importing and visualizing shapefiles\nlibrary(sf)  \n\n# Import the shapefile of global IPCC climate reference regions (only for land) \nIPCC_shp = read_sf(\"./SampleData-master/CMIP_land/CMIP_land.shp\")\n\n# View attribute table of the shapefile\nIPCC_shp # Notice the attributes look like a data frame\n\nSimple feature collection with 41 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -168 ymin: -56 xmax: 180 ymax: 85\nGeodetic CRS:  WGS 84\n# A tibble: 41 × 5\n   V1              V2                V3       V4                        geometry\n   &lt;chr&gt;           &lt;chr&gt;             &lt;chr&gt; &lt;dbl&gt;                   &lt;POLYGON [°]&gt;\n 1 ARCTIC          Greenland/Iceland GIC       1 ((-10 58, -10.43956 58, -10.87…\n 2 NORTH-AMERICA   N.E.Canada        NEC       2 ((-55 50, -55.4386 50, -55.877…\n 3 NORTH-AMERICA   C.North-America   CNA       3 ((-90 50, -90 49.5614, -90 49.…\n 4 NORTH-AMERICA   E.North-America   ENA       4 ((-70 25, -70.43478 25, -70.86…\n 5 NORTH-AMERICA   N.W.North-America NWN       5 ((-105 50, -105.4386 50, -105.…\n 6 NORTH-AMERICA   W.North-America   WNA       6 ((-130 50, -129.5614 50, -129.…\n 7 CENTRAL-AMERICA N.Central-America NCA       7 ((-90 25, -90.37179 24.76923, …\n 8 CENTRAL-AMERICA S.Central-America SCA       8 ((-75 12, -75.28 11.67333, -75…\n 9 CENTRAL-AMERICA Caribbean         CAR       9 ((-75 12, -75.32609 12.28261, …\n10 SOUTH-AMERICA   N.W.South-America NWS      10 ((-75 12, -74.57143 12, -74.14…\n# ℹ 31 more rows\n\n# Load global coastline shapefile \ncoastlines = read_sf(\"./SampleData-master/ne_10m_coastline/ne_10m_coastline.shp\")\n\n# Alternatively, download global coastlines from the web \n# NOTE: May not work if the online server is down\n# download.file(\"https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/physical/ne_110m_coastline.zip?version=4.0.1\",destfile = 'ne_110m_coastline.zip')\n# # Unzip the downloaded file\n# unzip(zipfile = \"ne_110m_coastline.zip\",exdir = 'ne-coastlines-110m')\n\n# Plot both sf objects using tmap:\ntm_shape(IPCC_shp)+\n  tm_borders()+            # Add IPCC land regions in blue color\n  tm_shape(coastlines)+\n  tm_sf()                  # Add global coastline\n\n\n\n#Subset shapefile for Eastern North-America\nterra::plot(IPCC_shp[4,][1], main=\"Polygon for Eastern North-America\")\n\n\n\n# Combine terra plots with overlaying shapefiles\ntmap_SM + \n  tm_shape(IPCC_shp)+\n  tm_borders()+            \n  tm_shape(coastlines)+\n  tm_sf()\n\n\n\n###############################################################\n#~~~ PART 1.4.2: Add spatial point to shapefile/ raster\n\n#~~ Create a spatial point for College Station, Texas\ncollege_station = st_sfc(\n                  st_point(x = c(-96.33, 30.62), dim = \"XY\"), # Lat-long as spatial points \n                  crs = \"EPSG:4326\")  # Coordinate system: More details in the next part\n\n#~~ Create map by adding all the layers\ntm_shape(IPCC_shp[c(3,4,6,7),])+                       # Selected regions from 'IPCC_shp'\n  tm_borders(col = \"black\",lwd = 1, lty = \"solid\")+    # Border color\n  tm_fill(col = \"lightgrey\")+                          # Fill color\n  tm_shape(coastlines)+                                # Add coastline\n  tm_sf(col = \"maroon\")+                               # Change color of coastline\n  tm_shape(college_station)+                           # Add spatial point to the map\n  tm_dots(size = 2, col = \"blue\")                      # Customize point\n\n\n\n\nNote: Each layer (here 3) needs to be added as with tm_shape()!"
  },
  {
    "objectID": "ch2.html#reprojection-of-rasters-using-terraproject",
    "href": "ch2.html#reprojection-of-rasters-using-terraproject",
    "title": "3  Spatial Mapping in R",
    "section": "4.6 Reprojection of rasters using terra::project",
    "text": "4.6 Reprojection of rasters using terra::project\nA coordinate reference system (CRS) is used to relate locations on Earth (which is a 3-D spheroid) to a 2-D projected map using coordinates (for example latitude and longitude). Projected CRSs are usually expressed in Easting and Northing (x and y) values corresponding to long-lat values in Geographic CRS. A good description of coordinate reference systems and their importance can be found here: https://docs.qgis.org/3.4/en/docs/gentle_gis_introduction/coordinate_reference_systems.html https://datacarpentry.org/organization-geospatial/03-crs/\n\n\n\n\n\nIn R, the coordinate reference systems or CRS are commonly specified in EPSG (European Petroleum Survey Group) or PROJ4 format (See: https://epsg.io/).  The Spatraster reprojection process is done with project() from the terra package.\n# Importing SMAP soil moisture data\nsm=rast(\"./SampleData-master/raster_files/SMAP_SM.tif\") \n\n#~~ Projection 1: NAD83 (EPSG: 4269)\n\nsm_proj1 = terra::project(sm, \"epsg:4269\")\n\nterra::plot(sm_proj1, \n             main = \"NAD83\",    # Title of the plot\n             col = mypal2,      # Colormap for the plot\n             axes = FALSE,      # Disable axes\n             box = FALSE,       # Disable box around the plots\n             asp = NA,          # No fixed aspect ratio; asp=NA fills plot to window\n             legend=FALSE)      # Disable legend\n\n#~~ Projection 2: World Robinson projection (ESRI:54030)\n\nsm_proj2 = terra::project(sm, \"ESRI:54030\")\n\nterra::plot(sm_proj2, \n             main = \"Robinson\", # Title of the plot\n             col = mypal2,      # Colormap for the plot\n             axes = FALSE,      # Disable axes\n             box = FALSE,       # Disable box around the plots\n             asp = NA,          # No fixed aspect ratio; asp=NA fills plot to window\n             legend=FALSE)      # Disable legend\n\nOther than the projections demonstrated, try the following:\n\"+init=epsg:3857\" For Mercator (EPSG: 3857): Used in Google Maps, Open Street Maps, etc.\n\"+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\" for World Robinson Projection\n\"+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\" for World Mercator projection\nWe will use a custom function provided with the material to plot the global raster in Robinson projection.\n\n#~~~Projection 2: Robinson projection\n\nWorldSHP=terra::vect(spData::world)\n\nRobinsonPlot &lt;- ggplot() +\n  geom_spatraster(data = sm)+                   # Plot SpatRaster layer               \n  geom_spatvector(data = WorldSHP, \n                  fill = \"transparent\") +       # Add world political map\n  ggtitle(\"Robinson Projection\") +              # Add title\n  scale_fill_gradientn(colors=mypal2,           # Use user-defined colormap\n                       name = \"Soil Moisture\",  # Name of the colorbar\n                       na.value = \"transparent\",# Set color for NA values\n                       lim=c(0,0.8))+           # Z axis limit\n  theme_minimal()+                              # Select theme. Try 'theme_void'\n  theme(plot.title = element_text(hjust =0.5),  # Place title in the middle of the plot\n        text = element_text(size = 12))+        # Adjust plot text size for visibility\n  coord_sf(crs = \"ESRI:54030\",                  # Reproject to World Robinson\n           xlim = c(-152,152)*100000,    \n           ylim = c(-55,90)*100000)\n\nprint(RobinsonPlot)\n\n\n\n\nNow let’s plot the robison plot using tmap:\n\nWorldSHP = st_as_sf(WorldSHP)           # Convert 'WorldSHP' to simple feature\n\ntm_shape(WorldSHP,                      # Initiate shapefile       \n         projection = 'ESRI:54030',     # Set projection: World Robinson\n         ylim = c(-65, 90)*100000,      # Set y-limit\n         xlim = c(-152,152)*100000,     # Set x-limit\n         raster.warp = TRUE)+              \n  tm_sf()+                              # Plot shapefile \n  tm_shape(sm,                          # Add raster file\n           projection = 'ESRI:54030',   # Set projection \n           raster.warp = FALSE) +\n  tm_raster( palette = mypal2,          # Set color map for raster\n             title = \"Soil Moisture\")+  # Add plot title\n  tm_layout(main.title = \"Surface Soil Moisture\",\n            main.title.fontfamily = \"Times\",               # Set text font\n            legend.show = T,                               # Show legend= T/F\n            legend.outside = T,                            \n            legend.outside.position = c(\"right\", \"top\"),   # Legend position\n            frame = FALSE,                                 # Add plot frame\n            earth.boundary.color = \"grey\",                 # Boundary color\n            earth.boundary.lwd = 2,                        # Boundary linewidth\n            fontfamily = \"Times\")+                         # Text font\n  tm_graticules(alpha = 0.2,                               # Add lat-long graticules\n                labels.inside.frame = FALSE,  \n                col = \"lightgrey\", n.x = 4, n.y = 3)\n\n\n\n\nUseful references: More excellent examples on making maps in R can be found here: https://bookdown.org/nicohahn/making_maps_with_r5/docs/introduction.html. Quintessential resource for reference on charts and plots in R: https://www.r-graph-gallery.com/index.html."
  }
]