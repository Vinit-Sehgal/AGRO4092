[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Spatial Analysis & Visualization",
    "section": "",
    "text": "1 Introduction\nStatistical computing is essential for scientific inquiry, discovery, and storytelling. With R, there are endless possibilities for assembling, transforming, querying, analyzing, and ultimately visualizing data. In this workshop, we will give you the tools to get you started."
  },
  {
    "objectID": "ch1.html#basic-operators",
    "href": "ch1.html#basic-operators",
    "title": "2  Operators and data types",
    "section": "2.1 Basic operators",
    "text": "2.1 Basic operators\nIn this section, we will learn about some basic R operators that are used to perform operations on values and variables. Some most commonly used operators are shown in the table below.\n\n\n\n\n2+4+7 # Sum \n\n[1] 13\n\n# Order of operation\n1/2*3+4-5\n\n[1] 0.5\n\n1/2*(3+4-5)\n\n[1] 1\n\n1/(2*(3+4-5))\n\n[1] 0.25\n\n1/(2*3+4-5) \n\n[1] 0.2\n\n## Notice how output changes with the placement of operators\n\n# Other operators:\n2^3\n\n[1] 8\n\nlog(10)\n\n[1] 2.302585\n\nsqrt(4)\n\n[1] 2\n\npi\n\n[1] 3.141593\n\n# Clear the Environment\nrm(list=ls())"
  },
  {
    "objectID": "ch1.html#basic-data-operations",
    "href": "ch1.html#basic-data-operations",
    "title": "2  Operators and data types",
    "section": "2.2 Basic data operations",
    "text": "2.2 Basic data operations\nIn this section, we will create some vector data and apply built-in operations to examine the properties of a dataset.\n\n# The \"is equal to\" or \"assignment operator in R is \"&lt;-\" or \"=\" \n\n# Generate sample data\ndata&lt;-c(1,4,2,3,9)\n\n# rbind combines data by rows, and hence \"r\"bind\n# cbind combines data by columns, and hence \"c\"bind\n\n# Checking the properties of a dataset. Note: the na.rm argument ignores NA values in the dataset.\ndata=rbind(1,4,2,3,9) \ndim(data)           # [5,1]: 5 rows, 1 column\n\n[1] 5 1\n\ndata[2,1]           # Show the value in row 2, column 1\n\n[1] 4\n\ndata[c(2:5),1]      # Show a range of values in column 1\n\n[1] 4 2 3 9\n\nmean(data, na.rm=T) # Mean\n\n[1] 3.8\n\nmax(data)           # Maximum\n\n[1] 9\n\nmin(data)           # Minimum\n\n[1] 1\n\nsd(data)            # Standard deviation\n\n[1] 3.114482\n\nvar(data)           # Variance\n\n     [,1]\n[1,]  9.7\n\nsummary(data) \n\n       V1     \n Min.   :1.0  \n 1st Qu.:2.0  \n Median :3.0  \n Mean   :3.8  \n 3rd Qu.:4.0  \n Max.   :9.0  \n\nstr(data)        # Prints structure of data\n\n num [1:5, 1] 1 4 2 3 9\n\nhead(data)       # Returns the 1st 6 items in the object\n\n     [,1]\n[1,]    1\n[2,]    4\n[3,]    2\n[4,]    3\n[5,]    9\n\nhead(data, 2)    # Print first 2\n\n     [,1]\n[1,]    1\n[2,]    4\n\ntail(data, 2)    # Print last 2\n\n     [,1]\n[4,]    3\n[5,]    9\n\n# Do the same, but with \"c()\" instead of \"rbind\"\ndata=c(1,4,2,3,9) \ndim(data)        # Note: dim is NULL\n\nNULL\n\nlength(data)     # Length of a dataset is the number of variables (columns)\n\n[1] 5\n\ndata[2]          # This should give you 4 \n\n[1] 4\n\n# Other operators work in the same way\nmean(data)       # Mean\n\n[1] 3.8\n\nmax(data)        # Maximum\n\n[1] 9\n\nmin(data)        # Minimum\n\n[1] 1\n\nsd(data)         # Standard deviation\n\n[1] 3.114482\n\nvar(data)        # Variance\n\n[1] 9.7\n\n# Text data\ndata=c(\"TAMU\",\"GEOS\",\"BAEN\",\"WMHS\") \ndata             # View\n\n[1] \"TAMU\" \"GEOS\" \"BAEN\" \"WMHS\"\n\ndata[1]\n\n[1] \"TAMU\"\n\n# Mixed data\ndata=c(1,\"GEOS\",10,\"WMHS\") # All data is treated as text if one value is text\ndata[3]                    # Note how output is in quotes i.e. \"10\"\n\n[1] \"10\""
  },
  {
    "objectID": "ch1.html#data-types",
    "href": "ch1.html#data-types",
    "title": "2  Operators and data types",
    "section": "2.3 Data types",
    "text": "2.3 Data types\nIn R, data is stored as an “array”, which can be 1-dimensional or 2-dimensional. A 1-D array is called a “vector” and a 2-D array is a “matrix”. A table in R is called a “data frame” and a “list” is a container to hold a variety of data types. In this section, we will learn how to create matrices, lists and data frames in R.\n\n\n\n\n# Lets make a random matrix\ntest_mat = matrix( c(2, 4, 3, 1, 5, 7), # The data elements \n  nrow=2,         # Number of rows \n  ncol=3,         # Number of columns \n  byrow = TRUE)   # Fill matrix by rows \n\ntest_mat = matrix( c(2, 4, 3, 1, 5, 7),nrow=2,ncol=3,byrow = TRUE) # Same result \ntest_mat\n\n     [,1] [,2] [,3]\n[1,]    2    4    3\n[2,]    1    5    7\n\ntest_mat[,2]      # Display all rows, and second column\n\n[1] 4 5\n\ntest_mat[2,]      # Display second row, all columns\n\n[1] 1 5 7\n\n# Types of datasets\nout = as.matrix(test_mat)\nout               # This is a matrix\n\n     [,1] [,2] [,3]\n[1,]    2    4    3\n[2,]    1    5    7\n\nout = as.array(test_mat)\nout               # This is also a matrix\n\n     [,1] [,2] [,3]\n[1,]    2    4    3\n[2,]    1    5    7\n\nout = as.vector(test_mat)\nout               # This is just a vector\n\n[1] 2 1 4 5 3 7\n\n# Data frame and list\ndata1=runif(50,20,30) # Create 50 random numbers between 20 and 30  \ndata2=runif(50,0,10)  # Create 50 random numbers between 0 and 10  \n\n# Lists\nout = list()        # Create and empty list\nout[[1]] = data1    # Notice the brackets \"[[ ]]\" instead of \"[ ]\"\nout[[2]] = data2\nout[[1]]          # Contains data1 at this location\n\n [1] 29.32660 28.00734 20.65916 28.09457 28.69884 20.50126 21.02799 21.49797\n [9] 26.26684 25.27062 29.83497 27.98597 29.65168 26.87764 26.68097 27.21222\n[17] 20.28942 26.20614 27.55100 27.81581 21.94926 25.84155 27.33514 26.08941\n[25] 22.73765 24.69059 23.78062 22.28293 29.19094 24.08998 23.56741 20.30362\n[33] 23.20885 22.09940 27.96115 23.42111 29.96588 20.03256 22.90212 20.15789\n[41] 28.84083 22.13102 22.25191 27.80785 24.16297 24.93997 28.94315 26.60714\n[49] 23.18928 28.27072\n\n# Data frame\nout=data.frame(x=data1, y=data2)\n\n# Let's see how it looks!\nplot(out$x, out$y)\n\n\n\nplot(out[,1])"
  },
  {
    "objectID": "ch2.html#overview",
    "href": "ch2.html#overview",
    "title": "3  Plotting with base R",
    "section": "3.1 Overview",
    "text": "3.1 Overview\n\n# Create 50 random numbers between 0 and 100  \ndata=runif(50, 0, 100) \n\n# Overplotting means adding layers to a plot.\nplot(data)            # The \"plot\" function initializes the plot.\n\n\n\nplot(data, type=\"l\")  # The \"type\" argument changes the plot type. \"l\" calls up a line plot\n\n\n\nplot(data, type=\"b\")  # Buffered points joined by lines\n\n\n\n# Try options type = \"o\" and type = \"c\" as well.\n\n# We can also quickly visualize boxplots, histograms, and density plots using the same procedure\nboxplot(data)        # Box-and-whisker plot\n\n\n\nhist(data)           # Histogram points\n\n\n\nplot(density(data))  # Plot with density distribution"
  },
  {
    "objectID": "ch2.html#plotting-univariate-data",
    "href": "ch2.html#plotting-univariate-data",
    "title": "3  Plotting with base R",
    "section": "3.2 Plotting univariate data",
    "text": "3.2 Plotting univariate data\nLet’s dig deeper into the plot function. Here, we will look at how to adjust the colors, shapes, and sizes for markers, axis labels and titles, and the plot title.\n\n# Part 2.2.1. Line plots\nplot(data,type=\"o\", col=\"red\",\n     xlab=\"x-axis title\",ylab =\"y-axis title\", main=\"My plot\", # Name of axis labels and title\n     cex.axis=2, cex.main=2,cex.lab=2,            # Size of axes, title and label\n     pch=23,       # Change marker style\n     bg=\"red\",     # Change color of markers\n     lty=5,        # Change line style\n     lwd=2         # Selecting line width\n) \n# Adding legend\nlegend(1, 100, legend=c(\"Data 1\"),\n       col=c(\"red\"), lty=2, cex=1.2)\n\n\n\n# Part 2.2.2. Histograms\nhist(data,col=\"red\",\n     xlab=\"Number\",ylab =\"Value\", main=\"My plot\", # Name of axis labels and title\n     border=\"blue\"\n) \n\n\n\n# Try adjusting the parameters:\n# hist(data,col=\"red\",\n#      xlab=\"Number\",ylab =\"Value\", main=\"My plot\", # Name of axis labels and title\n#      cex.axis=2, cex.main=2,cex.lab=2,            # Size of axes, title and label\n#      border=\"blue\", \n#      xlim=c(0,100), # Control the limits of the x-axis\n#      las=0,      # Try different values of las: 0,1,2,3 to rotate labels\n#      breaks=5    # Try using 5,20,50, 100\n# ) # Using more options and controls"
  },
  {
    "objectID": "ch2.html#plotting-multivariate-data",
    "href": "ch2.html#plotting-multivariate-data",
    "title": "3  Plotting with base R",
    "section": "3.3 Plotting multivariate data",
    "text": "3.3 Plotting multivariate data\nHere, we introduce you to data frames: equivalent of tables in R. A data frame is a table with a two-dimensional array-like structure in which each column contains values of one variable and each row contains one set of values from each column.\n\nplot_data=data.frame(x=runif(50,0,10), y=runif(50,20,30), z=runif(50,30,40)) \n\nplot(plot_data$x, plot_data$y) # Scatter plot of x and y data\n\n\n\n# Mandatory beautification\nplot(plot_data$x,plot_data$y, xlab=\"Data X\", ylab=\"Data Y\", main=\"X vs Y plot\",\n     col=\"darkred\",pch=20,cex=1.5) # Scatter plot of x and y data\n\n\n\n# Multiple lines on one axis\nmatplot(plot_data, type = c(\"b\"),pch=16,col = 1:4) \n\n\n\nmatplot(plot_data, type = c(\"b\",\"l\",\"o\"),pch=16,col = 1:4) # Try this now. Any difference? \nlegend(\"topleft\", legend = 1:4, col=1:4, pch=1)            # Add legend to a top left\nlegend(\"top\", legend = 1:4, col=1:4, pch=1)                # Add legend to at top center\nlegend(\"bottomright\", legend = 1:4, col=1:4, pch=1)        # Add legend at the bottom right"
  },
  {
    "objectID": "ch2.html#time-series-data",
    "href": "ch2.html#time-series-data",
    "title": "3  Plotting with base R",
    "section": "3.4 Time series data",
    "text": "3.4 Time series data\nWorking with time series data can be tricky at first, but here’s a quick look at how to quickly generate a time series using the as.Date function.\n\ndate=seq(as.Date('2011-01-01'),as.Date('2011-01-31'),by = 1) # Generate a sequence 31 days\ndata=runif(31,0,10)                 # Generate 31 random values between 0 and 10\ndf=data.frame(Date=date,Value=data) # Combine the data in a data frame\nplot(df,type=\"o\")"
  },
  {
    "objectID": "ch2.html#combining-plots",
    "href": "ch2.html#combining-plots",
    "title": "3  Plotting with base R",
    "section": "3.5 Combining plots",
    "text": "3.5 Combining plots\nYou can built plots that contain subplots. Using base R, we call start by using the “par” function and then plot as we saw before.\n\npar(mfrow=c(2,2)) # Call a plot with 4 quadrants\n\n# Plot 1\nmatplot(plot_data, type = c(\"b\"),pch=16,col = 1:4) \n\n# Plot 2\nplot(plot_data$x,plot_data$y) \n\n# Plot 3\nhist(data,col=\"red\",\n     xlab=\"Number\",ylab =\"Value\", main=\"My plot\", \n     border=\"blue\") \n\n# Plot4\nplot(data,type=\"o\", col=\"red\",\n     xlab=\"Number\",ylab =\"Value\", main=\"My plot\",\n     cex.axis=2, cex.main=2,cex.lab=2, \n     pch=23,   \n     bg=\"red\", \n     lty=5, \n     lwd=2 \n) \n\n\n\n# Alternatively, we can call up a plot using a matrix\nmatrix(c(1,1,2,3), 2, 2, byrow = TRUE) # Plot 1 is plotted for first two spots, followed by plot 2 and 3 \n\n     [,1] [,2]\n[1,]    1    1\n[2,]    2    3\n\nlayout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE)) # Fixes a layout of the plots we want to make\n\n # Plot 1\nmatplot(plot_data, type = c(\"b\"),pch=16,col = 1:4)\n\n# Plot2\nplot(plot_data$x,plot_data$y) \n\n# Plot 3\nhist(data,col=\"red\",\n     xlab=\"Number\",ylab =\"Value\", main=\"My plot\",\n     border=\"blue\"\n)"
  },
  {
    "objectID": "ch2.html#saving-figures-to-disk",
    "href": "ch2.html#saving-figures-to-disk",
    "title": "3  Plotting with base R",
    "section": "3.6 Saving figures to disk",
    "text": "3.6 Saving figures to disk\nPlots can be saved as image files or a PDF. This is done by specifying the output file type, its size and resolution, then calling the plot.\n\npng(\"awesome_plot.png\", width=4, height=4, units=\"in\", res=400) \n#Tells R we will plot image in png of given specification\n\nmatplot(plot_data, type = c(\"b\",\"l\",\"o\"),pch=16,col = 1:4)  \nlegend(\"topleft\", legend = 1:4, col=1:4, pch=1)\n\ndev.off() # Very important: this sends the image to disc\n\npng \n  2 \n\n# Keep pressing till you get the following: \n# Error in dev.off() : cannot shut down device 1 (the null device) \n# This ensures that we are no longer plotting.\n\n# It looks like what everything we just plotted was squeezed together to tightly. Let's change the size.\npng(\"awesome_plot.png\", width=6, height=4, units=\"in\", res=400)  #note change in dimension\n#Tells R we will plot image in png of given specification\n\nmatplot(plot_data, type = c(\"b\",\"l\",\"o\"),pch=16,col = 1:3)  \nlegend(\"topleft\", legend = 1:3, col=1:3, pch=16)\n\ndev.off() \n\npng \n  2 \n\n\n\nSome useful resources\nIf you want to plot something a certain way and don’t know how to do it, the chances are that someone has asked that question before. Try a Google search for what your are trying to do and check out some of the forums. There is TONS of material online. Here are some additional resources:\n\nThe R Graph Gallery: https://www.r-graph-gallery.com/\nGraphical parameters: https://www.statmethods.net/advgraphs/parameters.html\nPlotting in R: https://www.harding.edu/fmccown/r/\nHistogram: https://www.r-bloggers.com/how-to-make-a-histogram-with-basic-r/\nLine plots: https://www.statmethods.net/graphs/line.html"
  },
  {
    "objectID": "ch3.html#import-libraries-and-create-sample-dataset",
    "href": "ch3.html#import-libraries-and-create-sample-dataset",
    "title": "4  Plotting with ggplot2",
    "section": "4.1 Import libraries and create sample dataset",
    "text": "4.1 Import libraries and create sample dataset\nFor this section, we will use the ggplot2, gridExtra, utils, and tidyr packages. gridExtra and cowplot are used to combine ggplot objects into one plot and utils and tidyr are useful for manipulating and reshaping the data. We will also install some packages here that will be required for the later sections. You will find more information in the sections to follow.\n\n###############################################################\n#~~~ Load required libraries\nlib_names=c(\"ggplot2\",\"gridExtra\",\"utils\",\"tidyr\",\"cowplot\", \"RColorBrewer\")\n\n# If you see a prompt: Do you want to restart R prior to installing: Select **No**. \n\n# Install all necessary packages (Run once)\n# invisible(suppressMessages\n#           (suppressWarnings\n#             (lapply\n#               (lib_names,install.packages,repos=\"http://cran.r-project.org\",\n#                 character.only = T))))\n\n# Load necessary packages\ninvisible(suppressMessages\n          (suppressWarnings\n            (lapply\n              (lib_names,library, character.only = T))))\n\n###############################################################\n#~~~ Generate a dataset containing random numbers within specified ranges\nYear = seq(1913,2001,1)\nJan = runif(89, -18.4, -3.2)\nFeb = runif(89, -19.4, -1.2)\nMar = runif(89, -14, -1.8)\nJanuary = runif(89, 1, 86)\ndat = data.frame(Year, Jan, Feb, Mar, January)"
  },
  {
    "objectID": "ch3.html#basics-of-ggplot",
    "href": "ch3.html#basics-of-ggplot",
    "title": "4  Plotting with ggplot2",
    "section": "4.2 Basics of ggplot",
    "text": "4.2 Basics of ggplot\nWhereas base R has an “ink on paper” plotting paradigm, ggplot has a “grammar of graphics” paradigm that packages together a variety plotting functions. With ggplot, you assign the result of a function to an object name and then modify it by adding additional functions. Think of it as adding layers using pre-designed functions rather than having to build those functions yourself, as you would have to do with base R.\n\nl1 = ggplot(data=dat, aes(x = Year, y = Jan, color = \"blue\")) + # Tell which data to plot\n  geom_line() +      # Add a line\n  geom_point() +     # Add a points\n  xlab(\"Year\") +     # Add labels to the axes\n  ylab(\"Value\")\n\n# Or, they can be specified for any individual geometry\nl1 + geom_line(linetype = \"solid\", color=\"Blue\")  # Add a solid line\n\n\n\nl1 + geom_line(aes(x = Year, y = January)) # Add a different data set\n\n\n\n# There are tons of other built-in color scales and themes, such as scale_color_grey(), scale_color_brewer(), theme_classic(), theme_minimal(), and theme_dark()\n\n# OR, CREATE YOUR OWN THEME! You can group themes together in one list\ntheme1 = theme(\n  legend.position = \"none\",\n  panel.background = element_blank(),\n  plot.title = element_text(hjust = 0.5),\n  axis.line = element_line(color = \"black\"),\n  axis.text.y   = element_text(size = 11),\n  axis.text.x   = element_text(size = 11),\n  axis.title.y  = element_text(size = 11),\n  axis.title.x  = element_text(size = 11),\n  panel.border = element_rect(\n    colour = \"black\",\n    fill = NA,\n    size = 0.5\n  )\n)"
  },
  {
    "objectID": "ch3.html#multivariate-plots",
    "href": "ch3.html#multivariate-plots",
    "title": "4  Plotting with ggplot2",
    "section": "4.3 Multivariate plots",
    "text": "4.3 Multivariate plots\nFor multivariate data, ggplot takes the data in the form of groups. This means that each data row should be identifiable to a group. To get the most out of ggplot, we will need to reshape our dataset.\n\nlibrary(tidyr)\n\n# There are two generally data formats: wide (horizontal) and long (vertical). In the horizontal format, every column represents a category of the data. In the vertical format, every row represents an observation for a particular category (think of each row as a data point). Both formats have their comparative advantages. We will now convert the data frame we randomly generated in the previous section to the long format. Here are several ways to do this:\n\n# Using the gather function\ndat2 = dat %&gt;% gather(Month, Value, -Year)\n\n# Using pivot_longer and selecting all of the columns we want. This function is the best!\ndat2 = dat %&gt;% pivot_longer(cols = c(Jan, Feb, Mar), names_to = \"Month\", values_to = \"Value\") \n\n# Or we can choose to exclude the columns we don't want\ndat2 = dat %&gt;% pivot_longer(cols = -c(Year,January), names_to = \"Month\", values_to = \"Value\") \n\nhead(dat2) # The data is now shaped in the long format\n\n# A tibble: 6 × 4\n   Year January Month  Value\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;\n1  1913    79.4 Jan    -8.59\n2  1913    79.4 Feb    -7.94\n3  1913    79.4 Mar    -7.35\n4  1914    62.0 Jan    -4.93\n5  1914    62.0 Feb    -7.10\n6  1914    62.0 Mar   -13.1 \n\n\nLine plot\n\n# LINE PLOT\nl = ggplot(dat2, aes(x = Year, y = Value, group = Month)) +\n  geom_line(aes(color = Month)) +\n  geom_point(aes(color = Month))\nl\n\n\n\n\nDensity plot\n\n# DENSITY PLOT\nd = ggplot(dat2, aes(x = Value))\nd = d + geom_density(aes(color = Month, fill = Month), alpha=0.4) # Alpha specifies transparency\nd\n\n\n\n\nHistogram\n\n# HISTOGRAM\nh = ggplot(dat2, aes(x = Value))\nh = h + geom_histogram(aes(color = Month, fill = Month), alpha=0.4,\n                 fill = \"white\",\n                 position = \"dodge\")\nh\n\n\n\n\nGrid plotting and saving files to disk\nThere are multiple ways to arrange multiple plots and save images. One method is using grid.arrange() which is found in the gridExtra package. You can then save the file using ggsave, which comes with the ggplot2 library.\n\n# The plots can be displayed together on one image using \n# grid.arrange from the gridExtra package\nimg = grid.arrange(l, d, h, nrow=3)\n\n\n\n# Finally, plots created using ggplot can be saved using ggsave\nggsave(\"grid_plot_1.png\", \n       plot = img, \n       device = \"png\", \n       width = 6, \n       height = 4, \n       units = c(\"in\"), \n       dpi = 600)\n\nAnother approach is to use the plot_grid function, which is in the cowplot library. Notice how the axes are now beautifally aligned.\n\nimg2=cowplot::plot_grid(l, d, h, nrow = 3, align = \"v\") # \"v\" aligns vertical axes and \"h\" aligns horizontal axes\n\nggsave(\"grid_plot_2.png\", \n       plot = img2, \n       device = \"png\", \n       width = 6, \n       height = 4, \n       units = c(\"in\"), \n       dpi = 600)\n\n Some useful resources\nThe links below offer a treasure trove of examples and sample code to get you started.\n\nThe R Graph Gallery: https://www.r-graph-gallery.com/\nLine plots in ggplot2: http://www.sthda.com/english/wiki/ggplot2-line-plot-quick-start-guide-r-software-and-data-visualization\nTop 50 visualizations with ggplot2: http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html\nPractical guide in ggplot2: http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization"
  }
]