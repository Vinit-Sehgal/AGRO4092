---
title-block-banner: true
bibliography: references.bib
editor: 
  markdown: 
    wrap: sentence
editor_options: 
  chunk_output_type: console
---

# WORK IN PROGRESS

We will develop a 2-layer simple soil water balance modeling for simulating 1-D fluxes in the rootzone using USCRN station at Stillwater, OK, USA as an example.
Let us extract sample data from the sample station for 2021.

```{r 12a1, message = FALSE, warning = FALSE}
library(zoo)

# Yearly data from the sample station
# CRNdat = read.csv(url("https://www.ncei.noaa.gov/pub/data/uscrn/products/daily01/2021/CRND0103-2021-OK_Stillwater_2_W.txt"), header=FALSE,sep="")

CRNdat = read.csv("C:/Users/VSehgal/OneDrive - LSU AgCenter/TAMU/research_tamu/general_data_access/USCRN_insitu_data/daily_data_Jan23/2021/CRND0103-2021-OK_Stillwater_2_W.txt", header=FALSE,sep="")

# Data headers
# headers=read.csv(url("https://www.ncei.noaa.gov/pub/data/uscrn/products/daily01/headers.txt"), header=FALSE,sep="")

headers=read.csv("C:/Users/VSehgal/OneDrive - LSU AgCenter/TAMU/research_tamu/general_data_access/USCRN_insitu_data/daily_data_Jan23/headers.txt", header=FALSE,sep="")

# Column names as headers from the text file
colnames(CRNdat)=headers[2,1:ncol(CRNdat)]

# Replace fill values with NA
CRNdat[CRNdat == -9999]=NA
CRNdat[CRNdat == -99]=NA
CRNdat[CRNdat == 999]=NA

# Replace NA precipitation values with 0
CRNdat$P_DAILY_CALC[is.na(CRNdat$P_DAILY_CALC)]=0


# PET estimation using Priestley-Taylor method 
 PT_PET=function(Tmean,Rad,alpha){
    lambdaV= 2260                  # Latent heat of vaporization 
    rhoW= 1000                     # Density of water 
    gamma= 4.95*1e-4               # Psychrometric constant

    deltaVal=rep(0, length(Tmean))  # Create empty array
    
    # When Tmean<0
    deltaVal[Tmean<0]=0.3405*exp(0.0642*Tmean[Tmean<0])
    # When Tmean>=0
    deltaVal[Tmean>=0]=0.3221*exp(0.0803*((Tmean[Tmean>=0])^0.8876))
    
    # Priestley-Taylor equation 
    PETval=(alpha/(lambdaV*rhoW))*(deltaVal/(deltaVal+gamma))*Rad
    PETval[PETval<0]=0
    return(PETval) #estimate in m
 }
 
   # Weighted average of soil moisture at multiple depths to estimate RZSM
 library(zoo)
  SMpdf=data.frame(
    SM5=na.approx(CRNdat$SOIL_MOISTURE_5_DAILY,na.rm = FALSE), 
    SM10=na.approx(CRNdat$SOIL_MOISTURE_10_DAILY,na.rm = FALSE), 
    SM20=na.approx(CRNdat$SOIL_MOISTURE_20_DAILY,na.rm = FALSE), 
    SM50=na.approx(CRNdat$SOIL_MOISTURE_50_DAILY,na.rm = FALSE),
    SM100=na.approx(CRNdat$SOIL_MOISTURE_100_DAILY,na.rm = FALSE))

  RZSM_obs=(SMpdf$SM5*(7.5-0)+      # 0- 7.5 cm depth
        SMpdf$SM10*(15-7.5)+        # 7.5-15 cm depth
        SMpdf$SM20*(35-15)+         # 15-35 cm depth
        SMpdf$SM50*(75-35)+         # 35-75 cm depth
        SMpdf$SM100*(100-75))/100   # 75-100 cm depth

  # Characteristic curves
  Ks_s=0.7
  b_s=3
  cp_s=0.3
  por_s=0.5
  SSM=seq(0,por_s,length.out=100)
  
  infilt=Ks_s*(pmax(0,(exp(b_s*(SSM-cp_s))-1)/(exp(b_s*(1-cp_s))-1)))
  plot(SSM, infilt,type="l")
  
  infilt=Ks_s*(pmax(0,SSM-cp_s)/(por_s-cp_s))^1.8
  plot(SSM, infilt,type="l")
  
```

## Priestley-Taylor Method for Estimating Potential ET (PET)

This formulation is based on physical principles and can be seen as a simplified version of the Penman-Monteith formula for calculating evapotranspiration.
The simplification involves removing the aerodynamic terms from the Penman-Monteith equation and using a constant ($α$), which has been empirically derived and is estimated to be 1.26 for open bodies of water, but can range from \<1 (humid conditions) to almost 2 (arid conditions).
This constant tends to be higher in arid regions or areas experiencing significant water stress.
The Priestley-Taylor formula can be used for calculating daily evapotranspiration and can also be applied to smaller time intervals (hourly, for example) if the necessary data is available.

$$ \text { PET }=\left(\frac{\alpha}{\lambda_v \rho_{\mathrm{w}}}\right) \times \frac{\Delta}{\Delta+\gamma} \times \text {R}  $$

if $T_{mean}< 0^oC$

$$ \Delta=0.3405 \times \mathrm{e}^\left(0.0642 \mathrm{~T}_{\text {mean}}\right) \\ $$

if $T_{mean}> 0^oC$ $$ \Delta=0.3221 \times \mathrm{e}^\left(0.0803 \mathrm{~T}_{\mathrm{mean}}^{0.8876}\right) $$

where,

> $PET$= Daily potential evapotranspiration ($m$)
>
> $λv$ = Latent heat of vaporization (2260 $kJ/kg$)
>
> $ρw$ = Density of water (1000 $kg/m^3$)
>
> $γ$ = Psychrometric constant ( 4.95x $10^{-4}$ $kg/m^3/^oC$)
>
> $Rad$ = Daily solar radiation incident on a horizontal earth surface ($kg/m^2$)
>
> $Δ$ = Slope of the saturation vapor density curve from the psychrometric chart ($kg/^oC$)
>
> $T_{mean}$ = Daily mean air temperature ($^oC$)
>
> $\alpha$ = Priestley-Taylor correction factor

```{r , message = FALSE, warning = FALSE} 
# Parameters for Priestley-Taylor formula
lambdaV= 2260                  # Latent heat of vaporization 
rhoW= 1000                     # Density of water 
gamma= 4.95*1e-4               # Psychrometric constant
alpha=1.2                      # Priestley-Taylor correction factor

# PET estimation using Priestley-Taylor method 
 PT_PET=function(Tmean,Rad,alpha){
    
    deltaVal=rep(0, length(Tmean))  # Create empty array
    
    # When Tmean<0
    deltaVal[Tmean<0]=0.3405*exp(0.0642*Tmean[Tmean<0])
    # When Tmean>=0
    deltaVal[Tmean>=0]=0.3221*exp(0.0803*((Tmean[Tmean>=0])^0.8876))
    
    # Priestley-Taylor equation 
    PETval=(alpha/(lambdaV*rhoW))*(deltaVal/(deltaVal+gamma))*Rad
    PETval[PETval<0]=0
    return(PETval) #estimate in m
  }


```

As we can see from the function above, Priestley-Taylor formula requires mean temperature and solar radiation as inputs.
So, we will collect the meteorological dataset namely *a*) Mean daily temperature *b*) Total solar radiation from the sample station and estimate the value of total daily potential evapotranspiration (in m).
We will also store total daily precipitation, which will be used as model forcing.

```{r, message = FALSE, warning = FALSE}  
 # Observed meteorological forcings 
 Rad=CRNdat$SOLARAD_DAILY*1000        # (as 1 MJ= 1000 KJ)
 Tmean=CRNdat$T_DAILY_MEAN
 PCP=CRNdat$P_DAILY_CALC/10           # convert units from mm to cm

 # Linear gap-filling of missing samples and removing flagged samples
 library(zoo)
 Tmean=na.approx(Tmean,na.rm = FALSE)
 Rad=na.approx(Rad,na.rm = FALSE)
 
 PCP[PCP<0]=0       # Negative (flagged values are replaced by 0)
 PCP[is.na(PCP)]=0  # NA values are replaced by 0)

 # Create data frame for met forcings for the station
 datetime=as.Date(as.character(CRNdat$LST_DATE), format= "%Y%m%d")
 forcings=data.frame(Date=datetime,PCP, Rad,Tmean)
  
 # Apply Priestley-Taylor method for PET estimation using the PT_PET function
 PET=PT_PET(Tmean,Rad,alpha)
 
 # Plot estimated PET time series
 library(ggplot2)
 ggplot(data=forcings)+
  geom_line(aes(x = datetime, y = PET), color="steelblue") + 
  xlab("Date") +             # Add labels to the axes
  ylab("PET [in m]")+
  theme_bw()
```

## Simple Soil Water Balance Model

There are three important processes which are modeled: 1) Water energy coupling in the form of SM-EF curve.
EF is given as ET/PET.
PET is calculated by Priestley-Taylor method.
2) Runoff 3) SSM and RZSM relationship

\$ \Delta{SM}=P-ET-R-D\$

```{r 12a2, message = FALSE, warning = FALSE}
 # Observed meteorological forcings 
 # Convert Rad to KJ (as 1 MJ= 1000 KJ)
 Rad=na.approx(CRNdat$SOLARAD_DAILY*1000, na.rm=FALSE)
 Tmean=na.approx(CRNdat$T_DAILY_MEAN,na.rm=FALSE)
 # convert units from mm to cm
 PCP=na.approx(CRNdat$P_DAILY_CALC/10 ,na.rm=FALSE) 

 {# Model parameters
 # alpha=0.5                # Priestley-Taylor correction factor
 # EFmx=0.950               # Max Evaporative fraction 
 # 
 # por_s=0.5                # Surface field capacity
 # wp_s=0.12                # Surface wilting point
 # b_s=3                    # Power coefficient of surface drainage curve  
 # Ks_s=250                  # Saturated hydraulic conductivity of surface 
 # 
 # por_r=0.5                # RZ field capacity
 # wp_r=0.30                # RZ wilting point
 # b_r=1.1                    # Power coefficient of rootzone drainage curve  
 # Ks_r=100                 # Saturated hydraulic conductivity of rootzone 
 
  alpha=1.58; EFmx=0.9; por_s=0.39
  wp_s=0.08; b_s= 2.4; Ks_s=0.7
  por_r= 0.53; wp_r=0.4; b_r=3.5; Ks_r= 10
  
 #~~~ Two-layer Soil Water Balance Model 
 # Empty arrays to store data
 RZSM= SSM= drainage= ET= PET= runoff= infilt =Es=c()
 # Initial soil moisture state for model initiation
 SSM[1]=RZSM[1]=0.45                          
 
 for (t in 2:length(PCP)){
   zs=5                     # Surface layer depth (cm)
   cp_s=(por_s+wp_s)/2      # Surface critical soil moisture
   zr=100                   # Rootzone profile depth (cm)
   cp_r=(por_r+wp_r)/2      # Rootzone critical soil moisture
   hp_s=0.0
   EFmx_s=0.1
   intercept_thresh=0
   
   infilCap=pmax(0,(por_s-SSM[t-1])*zs)
   runoff[t]=pmax(0,(PCP[t]-infilCap))
   
   infilt[t]= Ks_s*(pmax(0,SSM[t-1]-cp_s)/(por_s-cp_s))^b_s
   SSM[t]=pmax(wp_s,
               (zs*SSM[t-1]+pmin(PCP[t],infilCap)-infilt[t])/zs)
   
   
   # 4. Calculate surface evaporation for days with no PCP 
   PET[t]=100*PT_PET(Tmean[t],Rad[t],alpha)  #PET in cm

   Es[t]=max(0,ifelse(SSM[t]>wp_s,
                PET[t]*(EFmx_s/(wp_s-hp_s))*(wp_s-hp_s),
                PET[t]*(EFmx_s/(wp_s-hp_s))*(SSM[t]-hp_s)))
   # 5. Exclude evaporative losses from SSM
   SSM[t]=ifelse(PCP[t]>=intercept_thresh,
         pmax(wp_s,(zs*SSM[t]-Es[t])/zs),SSM[t])
   
   
   # Estimate ET based on PET and RZSM state
   ET[t]=max(0,ifelse(RZSM[t-1]>cp_r,
                PET[t]*(EFmx/(cp_r-wp_r))*(cp_r-wp_r),
                PET[t]*(EFmx/(cp_r-wp_r))*(RZSM[t-1]-wp_r)))
   
   # Deep drainage based on RZSM state. Continues till CP
   #drainage[t]=Ks_r*(pmax(0,RZSM[t-1]-cp_r))^b_r
   # drainage[t]= max(0,Ks_r*((exp(b_r*(RZSM[t-1]-cp_r))-1)/(exp(b_r*(1-cp_r))-1)))
   drainage[t]= Ks_r*(pmax(0,RZSM[t-1]-cp_r)/(por_r-cp_r))^b_r
   # Update RZSM after drainage and ET
   RZSM[t]=pmax(wp_r,
                (zr*RZSM[t-1]-drainage[t]-ET[t]+infilt[t])/zr) 

}

}

 # Plotting estimated versus observed RZSM
{plot(RZSM_obs, type="l", col="gray80", lwd=3, 
      ylab="Volumetric SM", xlab="Time", 
      main="Comparison of observed vs modeled RZSM", ylim=c(0,0.5))
lines(RZSM, col="blue")
legend(x = "bottomleft",
       legend = c("Obs RZSM", "Modeled RZSM"),
       col = c("gray80","blue"),
       lwd = c(2,1), bty = "n")
}
  
{plot(SMpdf$SM5, type="l", col="gray80", lwd=3, 
      ylab="Volumetric SM", xlab="Time", 
      main="Comparison of observed vs modeled SSM", ylim=c(0,0.5))
lines(SSM, col="blue")
legend(x = "bottomleft",
       legend = c("Obs SSM", "Modeled SSM"),
       col = c("gray80","blue"),
       lwd = c(2,1), bty = "n")
}
  
```

## Optimizing Soil Water Balance Model Parameters

```{r 12a3, message = FALSE, warning = FALSE}
# Set condition for model initiation
ini_condition=RZSM_obs[1]  

# Data frame with Met forcings
forcing=data.frame(Rad=CRNdat$SOLARAD_DAILY*1000,   # in KJ
                  Tmean=CRNdat$T_DAILY_MEAN,        # in deg C  
                  PCP=CRNdat$P_DAILY_CALC/10)       # in cm

# Split 75% of data for model training 
forcing_trn=forcing[1:round(nrow(forcing)*.75),]
forcing_tst=forcing[round(nrow(forcing)*.75):nrow(forcing),]

# Soil Water balance model in the form of a function
SWB_model=function(ParIn,ini_condition,forcing){
  
  # Input parameters  
   alpha=ParIn[1]        # Priestley-Taylor correction factor
   EFmx=ParIn[2]         # Max Evaporative fraction 
   por_s=ParIn[3]         # Surface field capacity
   wp_s=ParIn[4]         # Surface wilting point
   b_s=ParIn[5]          # Power coefficient of surface drainage curve  
   Ks_s=ParIn[6]         # Saturated hydraulic conductivity of surface 
   por_r=ParIn[7]        # RZ field capacity
   wp_r=ParIn[8]         # RZ wilting point
   b_r=ParIn[9]          # Power coefficient of rootzone drainage curve  
   Ks_r=ParIn[10]        # Saturated hydraulic conductivity of rootzone 
 
  # Forcings
  PCP=na.approx(forcing$PCP, na.rm=F)
  Tmean=na.approx(forcing$Tmean, na.rm=F)
  Rad=na.approx(forcing$Rad, na.rm=F)

 #~~~ Simple Soil Water Balance Model 
 # Empty arrays to store data
 RZSM= SSM= drainage= ET= PET= runoff= infilt =Es=infilCap=c()  
 SSM[1]= RZSM[1]= ini_condition            # Initial soil moisture state
 for (t in 2:nrow(forcing)){
   zs=10                     # Surface layer depth (cm)
   cp_s=(por_s+wp_s)/2      # Surface critical soil moisture
   zr=100                   # Rootzone profile depth (cm)
   cp_r=(por_r+wp_r)/2      # Rootzone critical soil moisture
   hp_s=0.00
   EFmx_s=0.15
   
    # 1. Infiltration based on the SSM state after PCP
    infilCap[t]=pmax(0,(por_s-SSM[t-1])*zs)
    # 2 Runoff: if SSM > por. Update SSM to por after runoff
    runoff[t]=pmax(0,(PCP[t]-infilCap[t]))
    
    # 3. Infiltration
    infilt[t]= Ks_s*(pmax(0,SSM[t-1]-cp_s)/(por_s-cp_s))^b_s
    
    # 4. Update SSM based on infilt and PCP
    SSM[t]=pmax(wp_s,
                (zs*SSM[t-1]+pmin(PCP[t],infilCap[t])-infilt[t])/zs)
    
    
    # 5. Calculate surface evaporation for days with no PCP 
    PET[t]=100*PT_PET(Tmean[t],Rad[t],alpha)  #PET in cm
    
    Es[t]=max(0,ifelse(SSM[t]>wp_s,
                       PET[t]*(EFmx_s/(wp_s-hp_s))*(wp_s-hp_s),
                       PET[t]*(EFmx_s/(wp_s-hp_s))*(SSM[t]-hp_s)))
    # 6. Exclude evaporative losses from SSM
    SSM[t]=ifelse(PCP[t]==0,
                  pmax(wp_s,(zs*SSM[t]-Es[t])/zs),SSM[t])
    
    
    # 7. Estimate ET based on PET and RZSM state
    ET[t]=max(0,ifelse(RZSM[t-1]>cp_r,
                       PET[t]*(EFmx/(cp_r-wp_r))*(cp_r-wp_r),
                       PET[t]*(EFmx/(cp_r-wp_r))*(RZSM[t-1]-wp_r)))
    
    # 8. Deep drainage based on RZSM state. Continues till CP
    drainage[t]= Ks_r*(pmax(0,RZSM[t-1]-cp_r)/(por_r-cp_r))^b_r
    
    # 9. Update RZSM after drainage and ET
    RZSM[t]=pmax(wp_r,
                 (zr*RZSM[t-1]-drainage[t]-ET[t]+infilt[t])/zr) 
 }
   return(cbind(SSM,RZSM,drainage,ET,runoff,PET))
}

# Function to calculate error in the simulated RZSM vis-a-vis obs RZSM
error_fun=function(parVal){
  #~~~~~~~~~ MODEL VARIABLES HERE ~~~~~~~~~
  SSM_obs=SMpdf$SM5
  RZSM_obs=RZSM_obs
  spinup=30           # Excluded from the model evaluation
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
 # We use estimated parameters for this iteration in the SWB model
 sim_out=SWB_model(parVal,ini_condition,forcing=forcing)
 
 err=hydroGOF::mae(SSM_obs[-c(1:spinup)],
                    sim_out[-c(1:spinup),1])+   # SSM simulation RMSE
     hydroGOF::mae(RZSM_obs[-c(1:spinup)],
                     sim_out[-c(1:spinup),2])   # RZSM simulation RMSE

 names(par)= c("alpha","EFmx","por_s","wp_s","b_s",
               "Ks_s","por_r","wp_r","b_r","Ks_r")

 por_s=par[3]
 wp_s=par[4]
 por_r=par[7]
 wp_r=par[8]
 
 # Penalized constraint violation 
 if(!(por_s>wp_s) | !(por_r>wp_r)){ 
 # If WP>PC>Porosity is not true, the function returns high errors
 err=10e3  
 }
 return(err)
}

# Use SCE Optim to optimize the SWB model parameters
library(hydromad)
set.seed(9);ParOut=hydromad::SCEoptim(error_fun,
      # Initial values of params
       c(0.7,0.5,                     # "alpha","EFmx"
         0.4,0.2,1.1,4,             # "por_s","wp_s","b_s","Ks_s"
         0.4,0.2,1.1,4),            # "por_r","wp_r","b_r","Ks_r"  
      # Lower values of params
       lower = c(0.5,0.2,             # "alpha","EFmx"
                 0.25,0.08,0.1,0.1,   # "por_s","wp_s","b_s","Ks_s"
                 0.25,0.8,0.1,0.1),   # "por_r","wp_r","b_r","Ks_r"  
      # Upper values of params
       upper = c(2,0.98,              # "alpha","EFmx"
                 0.6,0.4,5,10,       # "por_s","wp_s","b_s","Ks_s"
                 0.6,0.4,5,10),      # "por_r","wp_r","b_r","Ks_r"  
       control = list(reltol = 1e-3,tolsteps=7,trace=F))

names(ParOut$par)=c("alpha","EFmx",
                    "por_s","wp_s","b_s","Ks_s",
                    "por_r","wp_r","b_r","Ks_r");ParOut$par

  # alpha=1.58; EFmx=0.3; por_s=0.39
  # wp_s=0.08; b_s= 2.4; Ks_s=0.7
  # por_r= 0.53; wp_r=0.4; b_r=3.5; Ks_r= 6.7
  
```

## Evaluating model output

```{r 12a4, message = FALSE, warning = FALSE}

{ # Apply the SWB model on test dataset
  optimOut=SWB_model(ParIn=ParOut$par,                                              ini_condition=RZSM_obs[1],
                  forcing=forcing)

  # Convert the output array to a data frame for easy plotting
  optimOut=data.frame(optimOut) 
  
  # Add time and precipitation to the output df so it can be plotted 
  optimOut$PCP=forcing$PCP
  optimOut$time=as.Date(as.character(CRNdat$LST_DATE),format="%Y%m%d")
  optimOut$RZSM_obs=RZSM_obs
  optimOut$SSM_obs=SMpdf$SM5
}

{ 
  library(ggplot2)
  library(patchwork)

  # Plot for observed and modeled RZSM
  p_SSM=ggplot(optimOut) +
  geom_line(aes(x = time, y = SSM, color = "SSM"),linetype=2)+
  geom_line(aes(x = time, y = SSM_obs, color = "SSM_obs"),linetype=1)+
  scale_y_continuous( name = "SSM")+
  labs(x = "Time") +
  theme_minimal() +
  scale_color_manual(values = c("blue","black"))+
  theme(legend.title = element_blank())

  p_RZSM=ggplot(optimOut) +
  geom_line(aes(x = time, y = RZSM, color = "RZSM"),linetype=2)+
  geom_line(aes(x = time, y = RZSM_obs, color = "RZSM_obs"),linetype=1)+
  scale_y_continuous( name = "RZSM")+
  labs(x = "Time") +
  theme_minimal() +
  scale_color_manual(values = c("blue","black"))+
  theme(legend.title = element_blank())

# Plot for modeled ET
p_ET=ggplot(optimOut) +
  geom_line(aes(x = time, y = ET, color = "ET"))+
  scale_y_continuous( name = "ET")+
  labs(x = "Time") +
  theme_minimal() +
  scale_color_manual(values = c("ET" = "blue"))+
  theme(legend.title = element_blank())

# Plot for modeled drainage
p_drain=ggplot(optimOut) +
  geom_line(aes(x = time, y = drainage, color = "drainage"))+
  scale_y_continuous( name = "Drainage")+
  labs(x = "Time") +
  theme_minimal() +
  scale_color_manual(values = c("drainage" = "blue"))+
  theme(legend.title = element_blank())

# Plot for observed precipitation
p_PCP=ggplot(optimOut) +
  geom_bar(aes(x = time, y = PCP, fill = "PCP"),  
           stat = "identity")+
  scale_y_continuous( name = "PCP",limits = c(0,6))+
  labs(x = "Time") +
  theme_minimal() +
  scale_fill_manual(values = c("PCP" = "black"))+
  theme(legend.title = element_blank())
}

# Combine all plots into a single window
library(patchwork)
p_SSM/p_RZSM/p_PCP/p_ET/p_drain+                # Plots one under the other
  plot_layout(guides = "collect",       # Collect common legends
            axis_titles = "collect",    # Collect common axis titles
            axes="collect") &           # Collect common axis labels
            theme(legend.position='bottom')           


plot(optimOut$RZSM,optimOut$ET)
```
